{## Card Rendering Macros
 ------------------------------------------------------------------------------------ ##

    Maintains path and inheritence consistency when generating content cards.


 ## Render a Single Card
 ------------------------------------------------------------------------------------ ##
    {% from "_cards/base" import render as renderCard %}
    {{ renderCard( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro render( item, layout, settings = null, loop = null, blockName = null ) %}{% if item ??? null %}

    {## Forces `layout` into an array ##}
    {% set layout = layout is iterable ? layout : [layout] %}
    {% set layout = layout | map( layout => "_cards/card.#{layout}" ) %}

    {## Content specific cards can override and/or inject content into any part of
        the requested card layout. Default path: `_content/<sectionHandle>/card.twig`

        Variations for different entryTypes can generally be dealt with inside the
        section-level card file. If separate entryType specific card overrides are
        necessary, the card path below can be adjusted to something like:

        {% set cardPath = [
            "_content/#{section}/card.#{entryType}",
            "_content/#{section}/card",
        ] %}

        Content specific override cards are passed the desired card layout as a variable
        called `extends` which they should use to dynamically extend themselves from.
     -------------------------------------------------------------------------------- ##}
    {% set section   = item.section   ??? item.section.handle ??? null %}
    {% set entryType = item.type      ??? item.entryType      ??? item.type.handle ??? null %}

    {% set cardPath  = [ "_content/#{section}/card" ] | merge( layout ) %}

    {% if blockName|default() %}
        {% embed cardPath with {
            cardPath : cardPath,
            blockName: blockName,
            item     : item,
            settings : settings,
            layout   : layout,
            loop     : loop,
        } only %}
            {% block content %}{{ block( blockName ) }}{% endblock %}
        {% endembed %}
    {% else %}
        {{ include( cardPath, {
            item     : item,
            settings : settings,
            layout   : layout,
            loop     : loop,
        }, withContext = false ) }}
    {% endif %}
{% endif %}{% endmacro %}



{## Render Multiple Cards
 ------------------------------------------------------------------------------------ ##
    {% from "_cards/base" import render as renderDeck %}
    {{ renderDeck( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro deck( collection, layout, settings ) %}
    {% for item in collection %}
        {{ _self.render( item, layout, settings, loop ) }}
    {% endfor %}
{% endmacro %}



{## Card Title Shortcut
 ------------------------------------------------------------------------------------ ##
    Card titles are typically used for things like tab names or accordion headers.

    {% from "_cards/base" import title as cardTitle %}
    {{ cardTitle( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro title( item, layout, settings = null, loop = null ) %}
    {{ _self.render( item, layout, settings, loop, 'card_title' ) }}
{% endmacro %}
