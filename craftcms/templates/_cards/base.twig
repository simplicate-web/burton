{% set card = {
    item    : item     ??? null,
    headline: headline ??? item.headline       ??? item.title   ??? null,
    summary : summary  ??? item.dek            ??? item.summary ??? item.text ??? null,
    images  : images   ??? item.images         ??? null,
    section : section  ??? item.section.handle ??? item.section ??? null,
    type    : type     ??? item.type.handle    ??? item.type    ??? null,
    tag     : tag      ??? 'div',
    loop    : loop     ??? null,
    class   : class    ??? null,
    action  : action   ??? null,
    settings: settings ??? item.settings ??? null,
} %}


{## Defaults Content Handlers
 ------------------------------------------------------------------------------------ ##
    Horizontal reuse lets us assign a {% block %} to a name of our choosing and then
    optionally override or modify the output of that named block from a child template.

    The individual content elements are assembled to create a card layout using the
    rendering options within each partial rendering template.

     - Headline
     - Summary
     - Images
     - Actions

    Read more: https://twig.symfony.com/doc/3.x/tags/use.html
 ------------------------------------------------------------------------------------ ##}
{% use "_cards/parts.headlines" with headline_default as card_headline,
                                     title_default    as card_title        %}
{% use "_cards/parts.summaries" with summary_default  as card_summary      %}
{% use "_cards/parts.images"    with images_default   as card_image        %}
{% use "_cards/parts.actions"   with action_default   as card_action,
                                     action_modal     as card_action_modal %}



{## Base Card Layout
 ------------------------------------------------------------------------------------ ##}
{% block card %}
    {% block open %}{{ block( 'card_open_tag') }}{% endblock %}

    {% block content %}{{
        block('card_image')    ~
        block('card_headline') ~
        block('card_action')
    }}{% endblock %}

    {% block close %}{{ block( 'card_close_tag') }}{% endblock %}
{% endblock %}



{% if null %}

{## Open Card Tag (i.e. div/article)
 ------------------------------------------------------------------------------------ ##}
{% block card_open_tag %}{% apply spaceless %}
    <{{card.tag|default('div')}} {{attr({
        class: card.class|default('relative flex w-full h-full'),
        data : {
            card   : card_template|default(),
            section: card.section|default(),
            type   : card.type|default(),
        }
    })}}>
{% endapply %}{% endblock %}



{## Close Card Tag
 ------------------------------------------------------------------------------------ ##}
{% block card_close_tag %}{% apply spaceless %}
    </{{card.tag|default('div')}}>
{% endapply %}{% endblock %}


{% endif %}


{## Card Rendering Macros
 ------------------------------------------------------------------------------------ ##

    Maintains path and inheritence consistency when generating content cards.


 ## Render a Single Card
 ------------------------------------------------------------------------------------ ##
    {% from "_cards/base" import render as renderCard %}
    {{ renderCard( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro render( item, layout, settings = null, loop = null, blockName = null ) %}{% if item ??? null %}

    {## Forces `layout` into an array ##}
    {% set layout = layout is iterable ? layout : [layout] %}
    {% set layout = layout | map( layout => "_cards/card.#{layout}" ) %}

    {## Content specific cards can override and/or inject content into any part of
        the requested card layout. Default path: `_content/<sectionHandle>/card.twig`

        Variations for different entryTypes can generally be dealt with inside the
        section-level card file. If separate entryType specific card overrides are
        necessary, the card path below can be adjusted to something like:

        {% set cardPath = [
            "_content/#{section}/card.#{entryType}",
            "_content/#{section}/card",
        ] %}

        Content specific override cards are passed the desired card layout as a variable
        called `extends` which they should use to dynamically extend themselves from.
     -------------------------------------------------------------------------------- ##}
    {% set section   = item.section   ??? item.section.handle ??? null %}
    {% set entryType = item.type      ??? item.entryType      ??? item.type.handle ??? null %}

    {% set cardPath  = [ "_content/#{section}/card" ] | merge( layout ) %}

    {% if blockName|default() %}
        {% embed cardPath with {
            cardPath : cardPath,
            blockName: blockName,
            item     : item,
            settings : settings,
            layout   : layout,
            loop     : loop,
        } only %}
            {% block content %}{{ block( blockName ) }}{% endblock %}
        {% endembed %}
    {% else %}
        {{ include( cardPath, {
            item     : item,
            settings : settings,
            layout   : layout,
            loop     : loop,
        }, withContext = false ) }}
    {% endif %}
{% endif %}{% endmacro %}



{## Render Multiple Cards
 ------------------------------------------------------------------------------------ ##
    {% from "_cards/base" import render as renderDeck %}
    {{ renderDeck( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro deck( collection, layout, settings ) %}
    {% for item in collection %}
        {{ _self.render( item, layout, settings, loop ) }}
    {% endfor %}
{% endmacro %}



{## Card Title Shortcut
 ------------------------------------------------------------------------------------ ##
    Card titles are typically used for things like tab names or accordion headers.

    {% from "_cards/base" import title as cardTitle %}
    {{ cardTitle( item, 'standard', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro title( item, layout, settings = null, loop = null ) %}
    {{ _self.render( item, layout, settings, loop, 'card_title' ) }}
{% endmacro %}
