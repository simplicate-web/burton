{% extends "_blocks/base/_base" %}

{## Redactor/CKEditor Filtering
 ------------------------------------------------------------------------------------ ##
    processRichHtml() is a custom twig function that parses the structure of the
    html, makes minor adjustments, and does some rudimentary context-aware separation.

    The PHP for the macro is located in a local module and can be edited.
    -> `craftcms/modules/gearbox/src/twigextensions/GearboxTwigExtension.php`

    It's not entirely necessary to perform this step here, however, finding out the
    text alignment of the opening paragraph of the main text field can help us make
    decisions about which micro-layout we use later.
 ------------------------------------------------------------------------------------ ##}
{% set processedText  = processRichHtml( block.text  ??? null ) %}
{% set processedText2 = processRichHtml( block.text2 ??? null ) %}



{## this is an example of some pretty advanced / multi-step functionality that would
    likely be pretty brittle in most implementations, but is surprisingly easy to do.

    we're going to be getting the output of the block we're rendering (after it's been
    rendered by the child template), and then we're going to manipulate some of the
    class names that were generated in the micro-layout.

    this is easier and more reliable to fix an occasional layout glitch via code
    rather than by creating another configuration setting for content editors.

 ------------------------------------------------------------------------------------ ##}
{% block contentWrapper %}

    {% set renderedContent %}{{ parent() }}{% endset %}

    {## Adjust the mx-* alignment on non-full width zone1 <div> elements, if the first
        text element (header, paragraph, etc) in the zone has a manually applied text
        alignment (center/right/left).

        The `oAlign` value is set when a block of htmlized text is run through the
        processRichText() macro.
     ------------------------------------------------------------------------------------ ##}
    {% set oAlign = processedText.oAlign ??? null %}
    {% if ( block.settings.layout in [ 'topBottom', 'bottomTop', 'textAbove2', 'textAbove3', 'textAbove4', 'textAbove6', 'textAbove' ] and oAlign == 'center' ) %}
        {% set renderedContent = renderedContent | retconAttr( '[data-zone="1"]', { 'class' : 'mx-auto' }, false ) %}
    {% endif %}


    {## output the content ##}
    {{ renderedContent }}

    {## Complex / weird logic should stay near the top of the file for visibility
    ------------------------------------------------------------------------------------ ##
        For example ... does this block share theme from the next/previous blocks?
    ------------------------------------------------------------------------------------ ##}
    {# {% set matchesPrevTheme =
            ( block.settings.inheritTheme ??? false )
        ??? ( ( block.previous.settings.theme ??? false ) == ( block.settings.theme ??? false ) )
        ??? false %}

    {% set matchesNextTheme =
            ( block.next.settings.inheritTheme ??? false )
        ??? ( ( block.next.settings.theme ??? false ) == ( block.settings.theme ??? false ) )
        ??? false %} #}

        {# startTheme   : ( not matchesPrevTheme ),
        closeTheme   : ( not matchesNextTheme ), #}

        {# firstBlock   : ( not block.loop or block.loop.first ),
        lastBlock    : ( not block.loop or block.loop.last ), #}
{% endblock %}


{## Matrix and Block Rendering
 ------------------------------------------------------------------------------------ ##

    {% import "blocks/_common" as blocks %}

    {{ blocks.builder( entry.contentBuilder.all(), 'content', { extra: 'settings' } }}

 ------------------------------------------------------------------------------------ ##}
{## render the contentBuilder content and wrap it in a container ##}
{% macro content( blocks = [], container = "container" ) %}
    {{ _self.builder( blocks, 'content', { container: container } )}}
{% endmacro %}


{## render the sidebarBuilder content and wrap it in a container ##}
{% macro sidebar( blocks = [], container = "sidebar" ) %}
    {{ _self.builder( blocks, 'sidebar', { container: container } )}}
{% endmacro %}






{% macro builder( blocks = [], builder = null, settings = {} ) %}

    {## Block Template Path
     -------------------------------------------------------------------------------- ##

        Below is an overly robust default look-up order for organizing individual
        and/or overly specific block variation templates.

        The first template that Twig finds matching the below like of path names will
        be used to render each respective block in the builder.

        Feel free to make changes to suit your project needs.

    -------------------------------------------------------------------------------- ##}

    {% set path = [
        "_sections/%section%/_blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_sections/%section%/_blocks/%builder%/%blockType%.%entryType%",
        "_sections/%section%/_blocks/%builder%/%blockType%.%variant%",
        "_sections/%section%/_blocks/%builder%/%blockType%",

        "_sections/%section%/_blocks/%blockType%.%entryType%.%variant%",
        "_sections/%section%/_blocks/%blockType%.%entryType%",
        "_sections/%section%/_blocks/%blockType%.%variant%",
        "_sections/%section%/_blocks/%blockType%",

        "_blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_blocks/%builder%/%blockType%.%entryType%",
        "_blocks/%builder%/%blockType%.%variant%",
        "_blocks/%builder%/%blockType%",

        "_blocks/%blockType%.%entryType%.%variant%",
        "_blocks/%blockType%.%entryType%",
        "_blocks/%blockType%.%variant%",
        "_blocks/%blockType%"
    ] %}


    {## normalizeBlocks()¹ is a custom twig function that splices fragments into the
        block array and merges attributes & reference fields into one settings hash.

        while not *entirely* necessary, this is cleaner than the alternative as the twig
        code needed to generate nested data structures on the fly looks like dog poop.
    --------------------------------------------------------------------------------- ##
      ¹ The PHP code for this twig function is editable within a local module² rather
        than a plugin. This is so that it's easier to make changes to this rather basic
        but important bit of code on a per-site basis.

      ² craftcms/modules/gearbox/src/twigextensions/NormalizeBlockTwigExtension.php
    --------------------------------------------------------------------------------- ##}
    {% for block in normalizeBlocks( blocks, builder, settings ) %}

        {{ include( path | map( p => p|replace({
            '%section%'  : block.settings.section   ??? null,
            '%builder%'  : block.settings.builder   ??? null,
            '%blockType%': block.settings.blockType ??? null,
            '%entryType%': block.settings.entryType ??? null,
            '%variant%'  : block.settings.variant   ??? null,
        }) ) ) }}

    {% endfor %}
{% endmacro %}


{%- macro loadById( entryId, entry ) -%}
    {% set modular = craft.entries().section('modular').id(entryId).one() ??? null  %}
    {% if modular %}
        {{ include( '_components/builders/builderContent.twig', {
            entry: modular
        }, withContext = false) }}
    {% endif %}
{%- endmacro -%}

{%- macro loadBySlug( slug, entry ) -%}
    {% set modular = craft.entries().section('modular').slug(slug).one() ??? null %}
    {% if modular %}
        {{ include( '_components/builders/builderContent.twig', {
            entry: modular
        }, withContext = false) }}
    {% endif %}
{%- endmacro -%}

{%- macro loadByPresetID( presetID, entry ) -%}
    {% set modular = craft.entries().section('modular').preset(presetID).one() ??? null %}

    {% if modular %}
        {{ include( '_components/builders/builderContent.twig', {
            entry: modular
        }, withContext = false) }}
    {% endif %}
{%- endmacro -%}
