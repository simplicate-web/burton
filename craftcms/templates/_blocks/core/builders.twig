{## Macros for rending Matrix Builders and Individual Blocks
 ------------------------------------------------------------------------------------ ##

    {% import "_blocks/core/builders" as blocks %}

    {{ blocks.builder( entry.contentBuilder.all(), 'content', { extra: 'settings' } }}

 ------------------------------------------------------------------------------------ ##

 ## The shortcut builder macros below use a custom Twig function called
    normalizeBlocks()¹, which is responsible for:

     - Splicing Fragments Blocks into the block list
     - Merging block attributes and reference fields into a single "settings" hash
     - Relocating hard to access details about each block, its contents, and its
       relatives, and placing them in more consistent and accessible location
       within the block variable.

    While not strictly necessary, this custom macro is a cleaner alternative than
    attempting all of the above solely in Twig. The code needed to parse and generate
    even minimally complex nested data structures in Twig reads like poop.

 ------------------------------------------------------------------------------------ ##

    ¹ The PHP code for this twig function is editable within a local module² rather
    than a plugin. This is so that it's easier to make changes to this rather basic
    but important bit of code on a per-site basis.

    ² craftcms/modules/gearbox/src/twigextensions/NormalizeBlockTwigExtension.php

 ------------------------------------------------------------------------------------ ##}

{% macro content( blocks = [], container = "container" ) %}
    {% set blocks = normalizeBlocks( blocks, 'content', { container: container } ) %}
    {{ _self.builder( blocks, 'content' )}}
{% endmacro %}


{% macro sidebar( blocks = [], container = "sidebar" ) %}
    {% set blocks = normalizeBlocks( blocks, 'sidebar', { container: container } ) %}
    {{ _self.builder( blocks, 'sidebar' )}}
{% endmacro %}


{% macro header( blocks = [], container = "container" ) %}
    {% set blocks = normalizeBlocks( blocks, 'header', { container: container } ) %}
    {{ _self.builder( blocks, 'header' )}}
{% endmacro %}


{% macro builder( blocks = [], builder = null ) %}

    {## Block Template Path
     -------------------------------------------------------------------------------- ##
        Below is an overly robust default look-up order for organizing individual
        and/or overly specific block variation templates.

        The first template that Twig finds matching the below like of path names will
        be used to render each respective block in the builder.

        Feel free to make changes to suit your project needs.
    -------------------------------------------------------------------------------- ##}

    {% set path = [
        "_content/%section%/_blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_content/%section%/_blocks/%builder%/%blockType%.%entryType%",
        "_content/%section%/_blocks/%builder%/%blockType%.%variant%",
        "_content/%section%/_blocks/%builder%/%blockType%",

        "_content/%section%/_blocks/%blockType%.%entryType%.%variant%",
        "_content/%section%/_blocks/%blockType%.%entryType%",
        "_content/%section%/_blocks/%blockType%.%variant%",
        "_content/%section%/_blocks/%blockType%",

        "_blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_blocks/%builder%/%blockType%.%entryType%",
        "_blocks/%builder%/%blockType%.%variant%",
        "_blocks/%builder%/%blockType%",

        "_blocks/%blockType%.%entryType%.%variant%",
        "_blocks/%blockType%.%entryType%",
        "_blocks/%blockType%.%variant%",
        "_blocks/%blockType%",

        "_blocks/core/%blockType%"
    ] %}

    {% for block in blocks %}

        {# <pre>
            {% set data = {} %}
            {% for field in block.fieldLayout.getCustomFieldElements() %}

                {% set data = data | merge({ (field.field.handle): block.getFieldValue(field.field.handle) }) %}

                {% if 'SuperTableField' in className(field.field) %}
                    {% set superTableRows = [] %}
                    {% for tableRow in craft.superTable.blocks({ ownerId: block.id, fieldId: field.field.id }).all() %}
                        {% set superTableRows = superTableRows | merge([tableRow.getFieldValues()]) %}
                    {% endfor %}

                    {% set data = data | merge({ (field.field.handle): superTableRows }) %}
                {% endif %}
            {% endfor %}

            {{ dump( block.settings ) }}

        </pre> #}

        {{ include( path | map( p => p|replace({
            '%section%'  : block.settings.section   ??? null,
            '%builder%'  : block.settings.builder   ??? null,
            '%blockType%': block.settings.blockType ??? null,
            '%entryType%': block.settings.entryType ??? null,
            '%variant%'  : block.settings.variant   ??? null,
        }) ), { block: block }, withContext = false ) }}
    {% endfor %}
{% endmacro %}