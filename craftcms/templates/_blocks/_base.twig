{% import "_macros/widgets" as widgets %}

{## it's important that when this template is included, it
   does not have access to the context of it's parent
   template(s), with the exception of these 3 parameters:

   builder  : the content builder being used
   entry    : the current loaded entry
   thisBlock: a normalizedBlock array. see twig `normalizeBlocks()` function.

   otherwise stuff gets wonky.

    ```
        {{ include('_blocks', {
            entry     : entry,
            builder   : builder,
            thisBlock : thisBlock
        }, withContext = false ) }}
    ```
#}

{## make sure we have the params passed from the calling template (usually: _loop) ##}
{% set builder   = builder   ??? 'builder' %}
{% set entry     = entry     ??? null %}
{% set thisBlock = thisBlock ??? null %}

{## try to normalize this block if it doesn't look normal ##}
{% if not ( thisBlock.isNormal ??? false ) %}
    {% set thisBlock = normalizeBlocks( [thisBlock], entry, builder )|first %}
{% endif %}

{## get the normalized parts of the block ##}
{% set content       = thisBlock.content       ??? null %}
{% set settings      = thisBlock.settings      ??? null %}
{% set blockType     = thisBlock.blockType     ??? ''   %}
{% set sectionHandle = thisBlock.sectionHandle ??? ''   %}
{% set entryHandle   = thisBlock.entryHandle   ??? ''   %}
{% set layout        = settings.layout         ??? ''   %}
{% set variant       = settings.variant        ??? ''   %}

{## don't bother going any further unless we have content ##}
{% if thisBlock and content %}

    {## pre-parse the most common fields and setttings across all
       block types and make an assortment of pre-formatted variables
       available to keep individual block templates slimmer ##}
    {% set headline   = headline ??? content.headline       ??? '' %}
    {% set text       = text     ??? content.text           ??? '' %}
    {% set text2      = text2    ??? content.text2          ??? '' %}
    {% set items      = items    ??? content.items.all()    ??? [] %}
    {% set images     = images   ??? content.images.all()   ??? [] %}
    {% set entries    = entries  ??? content.entries.all()  ??? [] %}
    {% set assets     = assets   ??? content.assets.all()   ??? [] %}
    {% set searches   = searches ??? content.searches.all() ??? [] %}

    {% set headParts  = processRichHtml( headline ) %}
    {% set header     = "#{headParts.eyebrow}<h1>#{headParts.bodyRaw}</h1>"| retconRemoveEmpty('div') %}

    {## if we're using settings.textMoveHeaders and/or settings.textMoveHeaders
       to automatically extract leading headlines (h1/h2/h3/etc) and/or
       trailing button elements from the primary block text field
       so that they can be relocated to a different part of the block grid ##}
    {% set moveFirstEyebrow = settings.moveFirstEyebrow ??? false %}

    {% set separateHeadline = settings.separateHeadline ??? false %}
    {% set separateCta      = settings.separateCta      ??? false %}

    {% set textParts  = processRichHtml( header ~ text ) %}
    {% set text2Parts = processRichHtml( text2 ) %}

    {% set collectionCard = settings.collectionCard      ??? '_components/cards/item/text' %}
    {% set collectionComp = settings.collectionComponent ??? null %}

    {## do we need to apply a class to the headline of a rich text block (or wrap it in a component) ##}
    {% set headlineClass = settings.headlineClass       ??? null %}
    {% set headlineComp  = settings.headlineComponent   ??? null %}
    {% if headlineClass and ( textParts.headline ??? null ) %}
        {% set newHeadline = textParts.headline|retconAttr( 'h1,h2,h3', { 'class': headlineClass }, false ) %}
        {% set textParts   = textParts | merge({ headline: newHeadline }) %}
    {% endif %}

    {## set a blockID for this block that can be used in any dynamic components ##}
    {% set blockID = content.id ??? create('craft\\helpers\\StringHelper').UUID() %}

    {## set default content for gridHeader / gridFooter ##}
    {% set headerCellContent = separateHeadline ? textParts.eyebrow ~ textParts.headline : null %}
    {% set footerCellContent = separateCta ? textParts.cta : null %}

    {## update the contents of the main block text field based on whether anything was separated out ##}
    {% set text = textParts.body %}
    {% set text = separateHeadline ? text : textParts.eyebrow ~ textParts.headline ~ text %}
    {% set text = separateCta      ? text : text ~ textParts.cta %}

    {% set text2 = text2Parts.eyebrow ~ text2Parts.headline ~ text2Parts.body ~ text2Parts.cta %}

    {## set default includes for grid cells 1/2 ##}
    {% set gridInclude1 = widgets.embed( thisBlock, 'cell1' ) %}
    {% set gridInclude1 = (settings.gridInclude1 ??? null) ? include( settings.gridInclude1, { settings: settings }, ignore_missing = true ) : gridInclude1 %}

    {% set gridInclude2 = widgets.embed( thisBlock, 'cell2' ) %}
    {% set gridInclude2 = (settings.gridInclude2 ??? null) ? include( settings.gridInclude2, { settings: settings }, ignore_missing = true ) : gridInclude2 %}

    {## include the twig template for this block from a list of
       possible locations based on the blocks attributes.

       the more specific/targetted a variant template is,
       the higher up in the list it should appear

       only the first template found will be included ##}
    {% set twigPath = [
        "_sections/#{sectionHandle}/_blocks/#{builder}/#{blockType}.#{entryHandle}.#{variant}",
        "_sections/#{sectionHandle}/_blocks/#{builder}/#{blockType}.#{entryHandle}",
        "_sections/#{sectionHandle}/_blocks/#{builder}/#{blockType}.#{variant}",
        "_sections/#{sectionHandle}/_blocks/#{builder}/#{blockType}",

        "_sections/#{sectionHandle}/_blocks/#{blockType}.#{entryHandle}.#{variant}",
        "_sections/#{sectionHandle}/_blocks/#{blockType}.#{entryHandle}",
        "_sections/#{sectionHandle}/_blocks/#{blockType}.#{variant}",
        "_sections/#{sectionHandle}/_blocks/#{blockType}",

        "_blocks/#{builder}/#{blockType}.#{entryHandle}.#{variant}",
        "_blocks/#{builder}/#{blockType}.#{entryHandle}",
        "_blocks/#{builder}/#{blockType}.#{variant}",
        "_blocks/#{builder}/#{blockType}",

        "_blocks/#{blockType}.#{entryHandle}.#{variant}",
        "_blocks/#{blockType}.#{entryHandle}",
        "_blocks/#{blockType}.#{variant}",
        "_blocks/#{blockType}"
    ] %}

    {{ include( twigPath ) }}
{% endif %}


{#
    below is a list of twig files the above include() would
    try to load for a block with these attributes:

      section   : articles
      entryType : blog
      blockType : imageFeature
      variant   : evenWidth
      builder   : header

    the first template found will be loaded in this order:

      _sections/articles/_blocks/header/imageFeature.blog.evenWidth.twig
      _sections/articles/_blocks/header/imageFeature.blog.twig
      _sections/articles/_blocks/header/imageFeature.evenWidth.twig
      _sections/articles/_blocks/header/imageFeature.twig

      _sections/articles/_blocks/imageFeature.blog.evenWidth.twig
      _sections/articles/_blocks/imageFeature.blog.twig
      _sections/articles/_blocks/imageFeature.evenWidth.twig
      _sections/articles/_blocks/imageFeature.twig


      _blocks/header/imageFeature.blog.evenWidth.twig
      _blocks/header/imageFeature.blog.twig
      _blocks/header/imageFeature.evenWidth.twig
      _blocks/header/imageFeature.twig

      _blocks/imageFeature.blog.evenWidth.twig
      _blocks/imageFeature.blog.twig
      _blocks/imageFeature.evenWidth.twig
      _blocks/imageFeature.twig
#}
