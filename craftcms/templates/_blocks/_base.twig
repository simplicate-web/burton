{% set thisBlock = {
    content      : {},
    entry        : null,
    builder      : 'content',
    settings     : null,
    isNormal     : null,
    blockType    : null,
    entryHandle  : null,
    sectionHandle: null,
    layout       : null,
    variant      : null,
}|map( (item,key) => _context[key] ??? block[key] ??? block.settings[key] ??? item ) %}


{## try to normalize this block if it doesn't look normal ##}
{% if not ( thisBlock.isNormal ??? false ) %}
    {% set normalBlock = normalizeBlocks( [thisBlock], thisBlock.entry, thisBlock.builder )|first %}
    {% set thisBlock   = thisBlock|map( (item,key) => normalBlock[key] ??? normalBlock.settings[key] ??? item ) %}
{% endif %}


{## don't bother going any further unless we have content ##}
{% if thisBlock.content ??? null %}

    {## pre-parse any html content fields that exist in this block using the processRichHtml()
        function from `craftcms/modules/gearbox/src/twigextensions/GearboxTwigExtension.php` ##}
    {% set contentParts = {
        headline : null,
        text     : null,
        text2    : null,
    }|map( (item,key) => processRichHtml( thisBlock.content[key] ??? null ) ) %}

    {## these variables will be passed into the blockLayout to populate content unless the {% block %} tags
        that contain them are overloaded within the template {% embed %} for this specific block type ##}
    {% set headerContent = null %}
    {% set footerContent = null %}
    {% set cell1Above    = null %}
    {% set cell1Body     = contentParts.text.eyebrow ~ contentParts.text.headline ~ contentParts.text.body ~ contentParts.text.cta %}
    {% set cell1Below    = null %}
    {% set cell2Above    = null %}
    {% set cell2Body     = contentParts.text2.eyebrow ~ contentParts.text2.headline ~ contentParts.text2.body ~ contentParts.text2.cta %}
    {% set cell2Below    = null %}

    {% set blockHeadline = contentParts.headline.body
        ? "<h1>#{contentParts.headline.body|striptags('<br><strong><em><mark>')}</h1>"
        : null
    %}

    {## the following are some default options configurable via the block `settings` object which can
        be utilized to subtly shift how content is displayed with a given block ##}

        {## move any trailing call-to-action buttons (plus legal mice type) to the block layout <footer> ##}
        {% if thisBlock.settings.textButtonsToFooter ??? null %}
            {% set footerContent = contentParts.text.cta  %}
            {% set cell1Body     = contentParts.text.eyebrow ~ contentParts.text.headline ~ contentParts.text.body %}
        {% endif %}

        {## relocate any eyebrow or leading h1,h2,h3 tags into the block layout <header> ##}
        {% if ( thisBlock.settings.textEyebrowToHeader ??? null ) or ( thisBlock.settings.textHeadlineToHeader ??? null ) %}

            {% if thisBlock.settings.textEyebrowToHeader ??? null %}
                {% set headerContent = contentParts.headline.eyebrow ~ contentParts.text.eyebrow %}
                {% set cell1Body     = blockHeadline ~ cell1Body %}
            {% else %}
                {% set headerContent = contentParts.headline.eyebrow ~ blockHeadline ~ contentParts.text.eyebrow ~ contentParts.text.headline %}
                {% set cell1Body     = contentParts.text.body ~ contentParts.text.cta %}

                {% if thisBlock.settings.textButtonsToFooter ??? null %}
                    {% set cell1Body = contentParts.text.body %}
                {% endif %}
            {% endif %}
        {% else %}
            {## use the `headline` field from headerBuilder blocks as the <h1> element for the page and prepend
                it to the block body text field (unless otherwise rearranged) ##}
            {% set cell1Body = contentParts.headline.eyebrow ~ blockHeadline ~ cell1Body %}
        {% endif %}


    {## do we need to apply a class to the headline of a rich text block (or wrap it in a component) ##}
    {# {% set headlineClass = settings.headlineClass       ??? null %}
    {% set headlineComp  = settings.headlineComponent   ??? null %}
    {% if headlineClass and ( textParts.headline ??? null ) %}
        {% set newHeadline = textParts.headline|retconAttr( 'h1,h2,h3', { 'class': headlineClass }, false ) %}
        {% set textParts   = textParts | merge({ headline: newHeadline }) %}
    {% endif %} #}

    {## set a blockID for this block that can be used in any dynamic components ##}
    {% set blockID = content.id ??? create('craft\\helpers\\StringHelper').UUID() %}

    {## set default includes for grid cells 1/2 ##}
    {# {% import "_macros/widgets" as widgets %} #}
    {# {% set gridInclude1 = widgets.embed( thisBlock, 'cell1' ) %}
    {% set gridInclude1 = (settings.gridInclude1 ??? null) ? include( settings.gridInclude1, { settings: settings }, ignore_missing = true ) : gridInclude1 %}

    {% set gridInclude2 = widgets.embed( thisBlock, 'cell2' ) %}
    {% set gridInclude2 = (settings.gridInclude2 ??? null) ? include( settings.gridInclude2, { settings: settings }, ignore_missing = true ) : gridInclude2 %} #}

    {## include the twig template for this block from a list of
       possible locations based on the blocks attributes.

       the more specific/targetted a variant template is,
       the higher up in the list it should appear

       only the first template found will be included ##}
    {% set twigPath = [
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.entryHandle}.#{thisBlock.variant}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.entryHandle}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.variant}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.builder}/#{thisBlock.blockType}",

        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.blockType}.#{thisBlock.entryHandle}.#{thisBlock.variant}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.blockType}.#{thisBlock.entryHandle}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.blockType}.#{thisBlock.variant}",
        "_sections/#{thisBlock.sectionHandle}/_blocks/#{thisBlock.blockType}",

        "_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.entryHandle}.#{thisBlock.variant}",
        "_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.entryHandle}",
        "_blocks/#{thisBlock.builder}/#{thisBlock.blockType}.#{thisBlock.variant}",
        "_blocks/#{thisBlock.builder}/#{thisBlock.blockType}",

        "_blocks/#{thisBlock.blockType}.#{thisBlock.entryHandle}.#{thisBlock.variant}",
        "_blocks/#{thisBlock.blockType}.#{thisBlock.entryHandle}",
        "_blocks/#{thisBlock.blockType}.#{thisBlock.variant}",
        "_blocks/#{thisBlock.blockType}"
    ] %}

    {{ include( twigPath, {
        settings: thisBlock.settings,
        content: thisBlock.content,
        contentParts: contentParts,
    } ) }}
{% endif %}


{#
    below is a list of twig files the above include() would
    try to load for a block with these attributes:

      section   : articles
      entryType : blog
      blockType : imageFeature
      variant   : evenWidth
      builder   : header

    the first template found will be loaded in this order:

      _sections/articles/_blocks/header/imageFeature.blog.evenWidth.twig
      _sections/articles/_blocks/header/imageFeature.blog.twig
      _sections/articles/_blocks/header/imageFeature.evenWidth.twig
      _sections/articles/_blocks/header/imageFeature.twig

      _sections/articles/_blocks/imageFeature.blog.evenWidth.twig
      _sections/articles/_blocks/imageFeature.blog.twig
      _sections/articles/_blocks/imageFeature.evenWidth.twig
      _sections/articles/_blocks/imageFeature.twig


      _blocks/header/imageFeature.blog.evenWidth.twig
      _blocks/header/imageFeature.blog.twig
      _blocks/header/imageFeature.evenWidth.twig
      _blocks/header/imageFeature.twig

      _blocks/imageFeature.blog.evenWidth.twig
      _blocks/imageFeature.blog.twig
      _blocks/imageFeature.evenWidth.twig
      _blocks/imageFeature.twig
#}
