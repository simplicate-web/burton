{## Content Builders
 ------------------------------------------------------------------------------------ ##}
{% macro staticContentOrBuilder( content = "", entry = null, settings = {} ) %}
    {% set settings = { container: "fluid", spacer: "base" } | merge( settings ) %}
    {% if content | trim %}
        {% set spacer = _self.spacer( settings.spacer ) %}
        {{ _self.container( settings.container, "#{spacer}#{content}#{spacer}" | raw ) }}
    {% else %}
        {{ _self.contentBuilder( entry.contentBuilder.all() ??? null, settings ) }}
    {% endif %}
{% endmacro %}


{% macro staticSidebarOrBuilder( sidebar = "", entry = null, settings = {} ) %}
    {% set settings = { container: "sidebar", spacer: "sm" } | merge( settings ) %}
    {% if sidebar | trim %}
        {% set spacer = _self.spacer( settings.spacer ) %}
        {{ _self.container( settings.container, "#{spacer}#{sidebar}#{spacer}" | raw ) }}
    {% else %}
        {{ _self.sidebarBuilder( entry.sidebarBuilder.all() ??? null, settings ) }}
    {% endif %}
{% endmacro %}


{% macro headerBuilder( matrixBlocks = [], settings = {} ) %}
    {% set settings = {
        container: "container"
    } | merge( settings ) %}

    {% import "_core/blocks/assemble" as blocks %}
    {{ blocks.assemble( matrixBlocks, 'header', settings )}}
{% endmacro %}


{% macro contentBuilder( matrixBlocks = [], settings = {} ) %}
    {% set settings = {
        container: "container"
    } | merge( settings ) %}

    {% import "_core/blocks/assemble" as blocks %}
    {{ blocks.assemble( matrixBlocks, 'content', settings )}}
{% endmacro %}


{% macro sidebarBuilder( matrixBlocks = [], settings = {} ) %}
    {% set settings = {
        container: "sidebar"
    } | merge( settings ) %}

    {% import "_core/blocks/assemble" as blocks %}
    {{ blocks.assemble( matrixBlocks, 'sidebar', settings )}}
{% endmacro %}



{## Grid Layouts
 ------------------------------------------------------------------------------------ ##}
{% macro grid( grid, html ) %}
    {% import "_site/layout/base.grids" as grids %}
    {{ grids.generate( grid, html ) }}
{% endmacro %}



{## Micro Layouts
 ------------------------------------------------------------------------------------ ##}
{% macro micro( layout = null, data = {} ) %}
    {% set data = {
        zone1 : null,
        zone2 : null,
        zone3 : null,
        header: null,
        footer: null,
        gap   : 'gap-8 @7xl:gap-16',
    } | merge(data) %}

    {%- if layout and [ data.zone1, data.zone2, data.zone3, data.header, data.footer ] | join | trim -%}
        {{ tag( 'div', {
            class: [ "relative" ],
            data : { micro: layout | kebab },
            html : include( template_from_string(
                "{% from '_site/layout/base.micro' import #{layout} as m %}{{m(d)}}"
             ), { d: data }
        ) } ) }}
    {%- endif -%}
{% endmacro %}



{## Spacers
 ------------------------------------------------------------------------------------ ##}
{% macro spacer( spacer, default = "base" ) %}
    {% set spacer = spacer and spacer is same as(true) ? default : spacer %}
    {% if spacer and block( "interspace__#{spacer}", "_site/atoms/spacers" ) is defined %}
        {{ block( "interspace__#{spacer}", "_site/atoms/spacers" ) }}
    {% endif %}
{% endmacro %}



{## Menu Stuff
 ------------------------------------------------------------------------------------ ##}
{% macro menu( menu ) %}
    {{ include( "_site/menus/#{menu}" ) }}
{% endmacro %}


{% macro mobileMenuTrigger() %}
    <span class="flex items-center lg:hidden" x-on:click="$dispatch('openMobileMenu')">
        <button type="button" class="bg-none p-0 m-0">
            {{ include( '_site/atoms/icons/hamburger.svg' ) }}
        </button>
    </span>
{% endmacro %}


{## Container Wrapper
 ------------------------------------------------------------------------------------ ##}
{% macro container( container = false, html = null ) %}

    {% set containers = {
        base  : [ '@container container' ],
        fluid : [ '@container 2xl:container px-4 md:max-2xl:px-4' ],
        narrow: [ '@container container max-w-5xl mx-auto px-4' ],
        title : [ '@container 2xl:container px-4 md:max-2xl:px-4 py-6 lg:py-16 removeLastChildMargin' ],
        none  : [],
    } %}

    {% set class = containers[container] ?? containers.base %}

    {%- if container and html and class -%}
        {{ tag( 'div', {
            class: class,
            html : html
        } ) }}
    {%- else -%}
        {{ html }}
    {%- endif -%}
{% endmacro %}


{% macro openContainer( container = false ) -%}
    {{ _self.container( container, "123456" ) | replace({
        '123456': '',
        '</div>': ''
    }) | trim | raw }}
{%- endmacro %}
{% macro closeContainer() %}</div>{% endmacro %}


{## Header, Main, Footer
 ------------------------------------------------------------------------------------ ##}
{% macro openHeader( settings = {} ) -%}
    <header {{attr({
        id   : "masthead",
        role : "banner",
        class: "relative z-40",
    } | merge( settings ))}}>
{%- endmacro %}
{% macro closeHeader() %}</header>{% endmacro %}


{% macro openMain( settings = {} ) -%}
    <main {{attr({
        id   : "content",
        class: "relative z-10 min-h-[50vh]",
    } | merge( settings ))}}>
{%- endmacro %}
{% macro closeMain() %}</main>{% endmacro %}


{% macro openFooter( settings = {} ) -%}
    <footer {{attr({
        id   : 'footer',
        role : 'contentinfo',
        class: 'relative z-20 bg-canvas',
        data : { theme: 'footer' }
    } | merge( settings ))}}>
{%- endmacro %}
{% macro closeFooter() %}</footer>{% endmacro %}



{## Two Column Layout with Sidebar
 ------------------------------------------------------------------------------------ ##}
{% macro withSidebar( content = null, sidebar = null, settings = {} ) %}
    {% set settings = {
        container: "fluid",
        spacer   : "base",
        wrapper  : "flex flex-col lg:flex-row gap-10 2xl:gap-28",
        content  : "min-h-[30vh] grow @container",
        sidebar  : "w-full lg:max-w-sm @container",
        tag      : 'aside',
    } | merge( settings ) %}

    {{ _this.container(
        settings.container,
        tag( 'div', {
            class: settings.wrapper,
            html : tag( 'div',        { html: content, class: settings.content } )
                 ~ tag( settings.tag, { html: sidebar, class: settings.sidebar } )
        })
    ) }}
{% endmacro %}