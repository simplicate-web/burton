{## Text Layer Adjustments   [Site Specific]
{-------------------------------------------------------------------------------------##}
{% macro outline( outline, settings ) -%}
    {%- import "_core" as assemble -%}

    {% set settings = settings ??? { _: true } %}
    {% set settings = {
        eyebrow      : null,
        eyebrow__type: 'eyebrow__basic',
        separator    : 'small',
    } | merge(settings) %}

    {% if outline ??? null %}
        {{ settings.eyebrow ? assemble.text( settings.eyebrow__type, settings.eyebrow, {}  ) }}
        {{ tag( 'div', {
            html : outline,
            class: 'py-6 border-y-4 border-theme-tint last-child-mb-0'
        })}}

        {{- assemble.separator( settings.separator ) -}}
    {% endif %}
{% endmacro %}


{## Basic Eyebrow
{-------------------------------------------------------------------------------------##}
{% macro eyebrow__basic( text, settings ) -%}
    {%- set text  = text ??? null -%}
    {%- set icon  = settings.eyebrowicon  ??? null -%}
    {%- set align = settings.eyebrowalign ??? '' -%}

    {%- if text or icon -%}
        <div class="eyebrow table {{align}}">
            <div class="flex flex-col gap-3" data-eyebrow="basic">
                {% if icon %}
                    {{ tag( 'div', { html: svg("@appicons/#{icon}.svg")
                        | attr({ class: ["w-10 fill-theme-accent", align] }) }) }}
                {% endif %}
                {{ tag('span', { class: 'text-sm @xl:text-lg uppercase font-headline text-theme-accent font-bold', text: text }) }}
            </div>
        </div>
    {% endif %}
{%- endmacro %}

{% macro eyebrow__centerbasic( text, settings ) -%}
    {{ _self.eyebrow__basic( text, settings | merge({ eyebrowalign: 'mx-auto' }) ) }}
{% endmacro %}



{## Image Captions
{-------------------------------------------------------------------------------------##}
{% macro image__caption( content, settings ) -%}
    {%- set content  = content  ??? null and content  is not iterable ? content|trim : '' -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {% set captionlayer = settings.captionlayer ??? 'default' %}

    {% if caption.alt and not caption.summary %}
        {% set caption = caption | merge({ summary: "<p>#{caption.alt}</p>" }) %}
    {% endif %}

    {% set title = tag( 'strong', { class: 'block text-sm uppercase', text: caption.title ?? null } ) %}
    {% set content = caption.summary ?? null %}

    {% set content = content
        | retconChange( 'p', 'div' )
        | retconAttr( 'div', { class: 'text-sm' }, false ) %}

    {% if captionlayer == 'title' and title %}
        <figcaption class="text-center">
            {{ title | raw }}
        </figcaption>
    {% endif %}

    {% if captionlayer == 'caption' and content %}
        <figcaption class="text-center">
            {{ content | raw }}
        </figcaption>
    {% endif %}

    {% if captionlayer == 'full' and ( title ?? content ) %}
        <figcaption class="text-center">
            {{ title | raw }}
            {{ content | raw }}
        </figcaption>
    {% endif %}
{% endmacro %}



{## Callout
{-------------------------------------------------------------------------------------##}
{% macro callout( content, settings ) -%}
    {%- set content  = content  ?? null is not iterable ? content|trim : '' -%}
    {%- set settings = settings ?? null is iterable     ? settings : {} -%}

    <div class="max-w-3xl mx-auto @container" data-theme="{{settings.theme}}">
        {% if settings._bit ?? null %}
            {% set bit = settings._bit %}
            {% if bit.images ??? null %}
                {%- import "_core" as assemble -%}
                {{- assemble.imagelayer( 'circle__thumb', bit.images, settings ) -}}
   	        {% else %}
                {% if bit.icon ?? null %}
		            {{ svg( "@appicons/#{bit.icon}.svg" ) | attr({ class: 'h-12 w-12 block fill-theme-accent' }) }}
                {% endif %}
            {% endif %}
        {% endif %}
        {{ raw( content ) }}
    </div>
{%- endmacro %}

{% macro callout__knockout( content, settings ) -%}
    {%- set theme = settings.theme ??? 'base' -%}
    {%- set settings = settings | merge({ theme: "#{theme}-reverse" }) -%}
    {{- _self.callout( content, settings ) -}}
{%- endmacro %}


{## Callout Quote
{-------------------------------------------------------------------------------------##}
{% macro callout__quote( content, settings ) -%}
    {%- set content  = content  ?? null is not iterable ? content|trim : '' -%}
    {%- set settings = settings ?? null is iterable     ? settings : {} -%}

    <div class="max-w-3xl mx-auto @container">
        {% set h4 = content | retconOnly( 'h4:last-of-type' ) %}
        {% set content = content | retconRemove( 'h4:last-of-type' ) %}
        {{ raw( content ) }}

        {% if settings._bit ?? null %}
            {% set bit = settings._bit %}
            {% if bit.images ??? null %}
                {%- import "_core" as assemble -%}
                {{- assemble.imagelayer( 'circle__thumb', bit.images, settings ) -}}
            {% endif %}
        {% endif %}

        {{ h4 | retconAttr( 'h4', { class: 'like-h4 pt-4' } ) }}
    </div>
{%- endmacro %}
