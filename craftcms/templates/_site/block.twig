{## Block Base   [Site Template]
{-------------------------------------------------------------------------------------##}
{% extends "_core/block" %}


{## Zone 1 Content (All Blocks)
{---------------------------------------------------------------------------------------}
    Zone 1 Content typically comes from a CKEditor/Redactor-style editor component.

    Since most blocks make use of the same "Zone 1 / Primary Copy" field, we can
    define this block in our base block path: ['_site/block','_core/block']

    This block is responsible for rendering the Zone 1 / Text field content and making
    any necessary adjustments to the content based on the block attribute settings.

{## Better Rich HTML / WYSIWYG Code Formatting
{---------------------------------------------------------------------------------------}
    This template makes use of `TextBase()` which is a custom Twig macro, written in
    PHP and editable in the SiteModule folder here:

 -> craftcms/modules/sitemodule/src/twigextensions/TextBaseTwig.php

    TextBase() parses html content, and separates it into a handful of logical parts
    that can be used to more precisely customize layouts without putting too much
    burden on content editors.

    i.e.
      - Eyebrow elements
      - Any (h1,h2,h3) headlines appearing before body text (p, ol, ul, etc)
      - CTA Buttons & Links (along with their kicker text), appearing after body text.
{-------------------------------------------------------------------------------------##}
{% block block__zone1 -%}
{%- if block.text ??? null -%}
    {%- set settings = settings ?? block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = {
        text1__headers: 'inline',
        text1__ctas   : 'inline',
        textlayer     : 'default',
    } | merge( settings ) -%}

    {%- set textbase = TextBase( block.text ??? null ) -%}
    {%- set content  = textbase.body ??? null -%}

    {%- set content  = settings.text1__headers == 'inline'
        ? textbase.eyebrow ~ textbase.headline ~ content
        : content -%}

    {%- set content  = settings.text1__ctas == 'inline'
        ? content ~ textbase.cta
        : content -%}

    {%- import "_assemble" as assemble -%}
    {{- assemble.text( settings.textlayer, content, settings ) -}}
{%- endif %}{%- endblock %}



{## Block <header> zone content
{-------------------------------------------------------------------------------------##}
{% block block__header -%}
{%- if block.text ??? null -%}
    {%- set settings = settings ?? block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {% set settings = {
        text1__headers: 'inline',
    } | merge( settings ) %}

    {%- if settings.text1__headers == 'header' -%}
        {%- set textbase = TextBase( block.text ) -%}
        {{- raw( textbase.eyebrow ~ textbase.headline ) -}}
    {%- endif -%}
{%- endif %}{% endblock %}



{## Block <footer> zone content
{-------------------------------------------------------------------------------------##}
{% block block__footer -%}
{%- if block.text ??? null -%}
    {%- set settings = settings ?? block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = {
        text1__ctas: 'inline',
    } | merge( settings ) -%}

    {%- if settings.text1__ctas == 'footer' -%}
        {{- raw( TextBase( block.text )['cta'] ?? '' ) -}}
    {%- endif -%}
{%- endif %}{% endblock %}



{## Body Builder - Single Column Layout
{---------------------------------------------------------------------------------------}
    If we wanted to change how the body builder renders whether it's in a single column
    template or one with a sidebar, we could do it here. See `builder_default` in
    `_core/card`
{-------------------------------------------------------------------------------------##}
{% macro builder__singlecol( blocks, settings ) -%}
    {%- set blocks   = blocks is null ? [] : blocks -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}

    {%- import "_assemble" as assemble -%}
    {{- assemble.builder( 'default', blocks, settings ) -}}
{% endmacro %}