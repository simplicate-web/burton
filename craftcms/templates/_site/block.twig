{## Block Skeleton
 ------------------------------------------------------------------------------------ ##}
{% extends "_core/block" %}

{% import "_core/assemble" as assemble %}

{## Zone 1 Text Content - Commonly CKEditor or Redactor based Rich Text/HTML
 ------------------------------------------------------------------------------------ ##
    Most Block types share a common "Zone 1 Text" field, but it is frequently optional.

    This block is responsible for rendering the Zone 1 / Text field content and making
    any necessary adjustments to the content based on the block attribute settings.
 ------------------------------------------------------------------------------------ ##}
{% block block__text -%}
    {% set settings  = settings ??? block.settings ??? {} %}
    {% set settings  = {
        text1__headers  : 'inline',
        text1__ctas     : 'inline',
        text1__textlayer: 'default',
    } | merge( settings ) %}

    {% set textparts = TextBase( block.text ??? null ) %}
    {% set textlayer = settings.text1__textlayer ??? settings.textlayer ??? null %}
    {% set content   = textparts.body ??? null %}

    {% if settings and content is not null %}
        {% if settings.text1__headers ??? 'inline' == 'inline' %}
            {% set content = textparts.eyebrow ~ textparts.headline ~ textparts.body %}
        {% endif %}

        {% if settings.text1__ctas  ??? 'inline' == 'inline' %}
            {% set content = content ~ textparts.cta %}
        {% endif %}
    {% endif %}

    {% import "_core/assemble" as assemble %}
    {{ assemble.text( content, textlayer, settings ) }}
{%- endblock %}



{## Block <header> zone content
 ------------------------------------------------------------------------------------ ##}
{% block block__header %}
    {% set settings = settings ??? block.settings ??? {} %}
    {% set settings = {
        text1__headers: 'inline',
    } | merge( settings ) %}
    {% set textparts = TextBase( block.text ??? null ) %}
    {% if settings.text1__headers == 'header' %}
        {{ raw( textparts.eyebrow ~ textparts.headline ) }}
    {% endif %}
{% endblock %}



{## Block <footer> zone content
 ------------------------------------------------------------------------------------ ##}
{% block block__footer %}
    {% set settings    = settings ??? block.settings ??? {} %}
    {% set text1__ctas = settings.text1__ctas ??? null %}
    {% set textparts   = TextBase( block.text ??? null ) %}
    {% if textparts.cta and text1__ctas == 'footer' %}
        {{ raw( textparts.cta ) }}
    {% endif %}
{% endblock %}



{## Block Spacers
 ------------------------------------------------------------------------------------ ##}
{% macro spacer__topbar( block, settings ) %}
    {{ block('header__topbar', "_site/header" ) }}
{% endmacro %}


{% macro spacer__normal( block, settings ) %}{{ _self.spacer__default( block, settings ) }}{% endmacro %}

{% macro spacer__default( block, settings ) %}
    {{ tag('div', {
        class: ['
            @container
            after:block
            after:content-[""]
            after:h-16
            @3xl:after:h-24
            @7xl:after:h-36
        ' | trim ]
   }) }}
{% endmacro %}


{% macro spacer__small( block, settings ) %}
    {{ tag('div', {
        class: ['
            after:block
            after:content-[""]
            after:h-6
            @3xl:after:h-8
            @7xl:after:h-14
        ' | trim ]
    }) }}
{% endmacro %}


{% macro spacer__large( block, settings ) %}
    {{ tag('div', {
        class: ['
            after:block
            after:content-[""]
            after:h-20
            @3xl:after:h-28
            @7xl:after:h-40
        ' | trim ]
    }) }}
{% endmacro %}


{% macro spacer__extra( block, settings ) %}
    {{ tag('div', {
        class: ['
            after:block
            after:content-[""]
            after:h-32
            @3xl:after:h-40
            @7xl:after:h-52
        ' | trim ]
    }) }}
{% endmacro %}


{% macro spacer__tilt( block, settings ) %}
    <div class="z-10 !bg-prev-block-bg h-16 mb-[-1px]"  data-theme="{{ settings.theme ??? null }}" data-prev-theme="{{ settings.next.theme ??? null }}" data-next-theme="{{ block.next.theme ??? null }}">
        <svg class="fill-next-block-bg h-full w-full rotate-180 block m-0 p-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
            <path d="M1200 120L0 16.48 0 0 1200 0 1200 120z" class="shape-fill h-full w-full"></path>
        </svg>
    </div>
{% endmacro %}


{% macro spacer__wave( block, settings ) %}
    <div class="z-10 !bg-prev-block-bg h-16 mb-[-1px]" data-theme="{{ block.settings.theme ??? null }}" data-prev-theme="{{ block.prev.theme ??? null }}" data-next-theme="{{ block.next.theme ??? null }}">
        <svg class="fill-next-block-bg h-full w-full rotate-180 block m-0 p-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
            <path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" class="shape-fill"></path>
        </svg>
    </div>
{% endmacro %}


{% macro spacer__stitch( block, settings ) %}
    <div class="relative w-full" data-theme="{{ block.settings.theme ??? null }}" data-prev-theme="{{ block.prev.theme ??? null }}" data-next-theme="{{ block.next.theme ??? null }}">
        <div class="absolute left-1/2 bottom-0 h-8 border-dashed border-l-4 border-next-block-bg" aria-hidden="true"></div>
        <div class="absolute left-1/2 top-0 h-8 border-dashed border-l-4 border-prev-block-bg" aria-hidden="true"></div>
    </div>
{% endmacro %}