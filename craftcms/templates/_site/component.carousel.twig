{% extends template_from_string('{% block carousel %}{% endblock %}') %}

{% block carousel %}

    {% set items = items ??? null %}
    {% set uuid  = create('craft\\helpers\\StringHelper').UUID() %}

    {% if items %}
        <div
            class="w-full relative"
            x-data="{ splide: null }"
            x-cloak
            x-init="$nextTick(() => {
                splide = new Splide($refs['splide-{{uuid}}'], {{ block('splideConfig') }} )

                splide.on( 'overflow', function() {
                    splide.options = {
                        arrows    : ( {{ items | length }} > splide.options.perPage ),
                        pagination: ( {{ items | length }} > splide.options.perPage ),
                        drag      : ( {{ items | length }} > splide.options.perPage )
                    }
                } )

                splide.mount()
            })">

            <section
                id="splide-{{uuid}}"
                x-ref="splide-{{uuid}}"
                class="splide min-w-[260px] {{ block('carouselClass') }}"
                aria-label="Carousel"
            >
                <div class="splide__track {% block trackClass %}{% endblock %}">
                    <ul class="splide__list {% block listClass %}{% endblock %}">
                        {% for item in items %}
                            <li class="splide__slide {{ block('slideClass') }}">
                                {% block slide %}{{ item }}{% endblock %}
                            </li>
                        {% endfor %}
                    </ul>
                </div>

                <footer>
                    <ul class="splide__pagination"></ul>
                </footer>
            </section>
        </div>

        {% html %}
            {% import '_core/javascript' as javascript %}
            {{ javascript.splide_cdn() }}
        {% endhtml %}
    {% endif %}
{% endblock %}



{% block splideConfig %}
    {
        type: 'loop',
        perPage: 1
    }
{% endblock %}

{% block slideClass %}
    flex
    flex-col
    items-center
    justify-start
{% endblock %}

{% block carouselClass %}
    relative
    z-40
    mb-6
    lg:mb-0
{% endblock %}


{% macro cardCarousel( items, ) %}

    {## What are we supposed to be rendering?
    ------------------------------------------------------------------------------------ ##}
    {% set items      = items    ??? null %}
    {% set settings   = settings ??? null %}
    {% set cardLayout = settings.cardLayout ??? settings['cardLayout.default'] ??? 'summary' %}
    {% set cardGrid   = settings.cardGrid   ??? settings['cardGrid.default']   ??? 'fixed1'   %}


    {## Get Carousel Config
    ------------------------------------------------------------------------------------ ##
        By default we store a splideConfig hash in `_site/_grids` for each grid
        definition since these are typically modified in unison.
    ------------------------------------------------------------------------------------ ##}
    {% import "_site/_grids" as grids %}
    {% set gridJson = grids.definitions() | json_decode %}


    {% embed '_site/component.carousel' with {
        items   : items,
        settings: settings,
        card    : cardLayout,
        config  : gridJson.options[cardGrid].splideConfig ??? null,
    } %}

        {% block slide %}
            {% import "_core/card" as cards %}
            {{ cards.single( item, card, settings ) }}
        {% endblock %}

        {% block splideConfig %}
            {{ config ??? parent() }}
        {% endblock %}

    {% endembed %}

{% endmacro %}
