{## Accordion Base Template
 ------------------------------------------------------------------------------------ ##

 ------------------------------------------------------------------------------------ ##}
{% extends template_from_string('{% block accordion %}{% endblock %}') %}

{# {% import "_core/card" as cards %}
{% macro cardLoop( items = [], layout = null, settings = {} ) %}
    {% set layout = layout ??? settings.cardLayout ??? 'summary' %}
    {% set panels = items | map( item => {
        title  : cards.title(  item, layout, settings ),
        content: cards.single( item, layout, settings ),
    } ) %}

    {%- if panels -%}
        {% embed '_core/accordion' with { panels: panels } %}
            {% block panelContent %}
                {{ panel.content | raw }}
            {% endblock %}

            {% block panelTitle %}
                {{ panel.title | raw }}
            {% endblock %}
        {% endembed %}
    {%- endif -%}
{% endmacro %} #}

{% block accordion %}

    {% set panels = panels ??? null %}
    {% set uuid   = create('craft\\helpers\\StringHelper').UUID() %}
    {% set header = header ??? 'h3' %}

    <div x-data="{ active: '{{uuid}}-1' }" class="{{ block( 'accordionClass' ) }}">
        {% for panel in items ??? null %}
            {% block panel %}
                <div
                    role="region"
                    x-cloak
                    x-data="{
                        id: '{{uuid}}-{{loop.index}}',
                        animatingOpen: false,
                        get expanded() {
                            return this.active === this.id
                        },
                        set expanded(value) {
                            this.active = value ? this.id : null

                            if( this.active == this.id ) {
                                this.animatingOpen = true
                                setTimeout(() => {
                                    this.animatingOpen = false
                                }, 200 );
                            }
                        },
                        handleLeaving() {
                            if( this.animatingOpen ) {
                                setTimeout(() => {
                                    document.getElementById('{{uuid}}-{{loop.index}}-header').scrollIntoView({ behavior: 'smooth' })
                                }, 100 );
                            }
                        }
                    }"
                    :class="{ 'shadow': expanded }"
                >
                    <{{hTag}} class="h-full mb-0 scroll-mt-10" id="{{uuid}}-{{loop.index}}-header" x-intersect:leave="handleLeaving()">
                        <button
                            x-on:click="expanded = !expanded"
                            :aria-expanded="expanded"
                            class="{{ block( 'panelTitleClass' ) }}"
                        >{% block panelLabel %}
                            <span class="text-left w-full block">{% block panelTitle %}{{ panel.title ??? null }}}{% endblock %}</span>
                            <span x-show="expanded"  aria-hidden="true" class="ml-4">&minus;</span>
                            <span x-show="!expanded" aria-hidden="true" class="ml-4">+</span>
                        {% endblock %}</button>
                    </{{hTag}}>

                    <div x-show="expanded" x-collapse.duration.200ms>
                        <div class="{{ block( 'panelOpenClass' ) }}">
                            {% block panelContent %}{% endblock %}
                        </div>
                    </div>
                </div>
            {% endblock %}
        {% endfor %}
    </div>
{% endblock %}

{% block panelOpenClass %}
    p-6 bg-theme-contrast-light
{% endblock %}

{% block accordionClass %}
    mx-auto max-w-4xl space-y-4 w-full
{% endblock %}

{% block panelTitleClass %}
    flex
    p-4
    w-full
    h-full
    items-center
    justify-between
    text-base
    bg-theme-dark
    text-theme-contrast
    font-medium
    rounded
    hover:text-theme-alert
{% endblock %}