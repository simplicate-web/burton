{## Micro Layout Generator
 ------------------------------------------------------------------------------------ ##

    Mobile ready named layouts for creating some kind of relationship between two or
    more pieces of content. Used extensively in pretty much all blocks.

    - http://localhost:8000/sitehub/layout/micro-layouts


 ## Two Zone Layouts
 ------------------------------------------------------------------------------------ ##
    While there are technically 4 areas for content within a two-zone layout, the
    number of zones refers to the primary content areas, with optional header and
    footer fields always being assumed.

    You know .. like how they call it a 2-lane highway even through there's 4 lanes.

    Most frequently used as a modifier for block *layout* options.

    Sample output:
    ╭──────────────────────────────────────────────────────────────────╮
    │                                                                  │
    │       <header class="#{header}">                                 │
    │           // Header Content (optional)                           │
    │       </header>                                                  │
    │                                                                  │
    │       <div class="#{base} #{gap}" data-micro="layoutName">       │
    │           <div class="#{zone1}" data-zone="1">                   │
    │              // Zone 1 Content                                   │
    │           </div>                                                 │
    │                                                                  │
    │           <div class="#{zone2}" data-zone="2">                   │
    │               // Zone 2 Content                                  │
    │           </div>                                                 │
    │       </div>                                                     │
    │                                                                  │
    │       <footer class="#{footer}">                                 │
    │           // Footer Content (optional)                           │
    │       </footer>                                                  │
    │                                                                  │
    ╰──────────────────────────────────────────────────────────────────╯

 !! Note that a wrapper element is not generated when header or footer content is
    provided. You need to wrap it up on your own.

 ------------------------------------------------------------------------------------ ##

 !! This macro outputs as JSON so that it can be read by the macro template or any
    other place it might be useful (like Sitehub reference pages).

 ------------------------------------------------------------------------------------ ##}
{% macro definitions() %}{{ {

    _:'## defaults are used for any attributes left off an option definition',
    defaults: {
        base : 'w-full relative',
        gap  : 'gap-8 @4xl:gap-12 @7xl:gap-16',

        zone1: 'w-full @container',
        zone2: 'w-full @container',

        header          : 'w-full max-w-3xl last:mb-8 @container',
        header__left    : 'w-full max-w-3xl last:mb-8 @container mr-auto',
        header__center  : 'w-full max-w-3xl last:mb-8 @container mx-auto',
        header__right   : 'w-full max-w-3xl last:mb-8 @container ml-auto',

        footer          : 'w-full max-w-3xl first:mt-8 @container',
        footer__left    : 'w-full max-w-3xl first:mt-8 @container mr-auto',
        footer__center  : 'w-full max-w-3xl first:mt-8 @container mx-auto',
        footer__right   : 'w-full max-w-3xl first:mt-8 @container ml-auto',
    },

    _:'## named microlayout definitions',
    options: {

        topBottom: {
            _:'## Zone 1 (1024px max) above Zone 2 (full)',
            base         : 'w-full relative flex flex-col',
            zone1        : 'w-full max-w-5xl @container',
            zone1__left  : 'w-full max-w-5xl @container mr-auto',
            zone1__center: 'w-full max-w-5xl @container mx-auto',
            zone1__right : 'w-full max-w-5xl @container ml-auto',

            _type: 'twozone',
            _reverse: 'bottomTop'
        },


        topBottomCenter: {
            _:'## Zone 1 (1024px max) above Zone 2 (full). Centered Zone 1 / Header / Footer.',
            base  : 'w-full relative flex flex-col',
            zone1 : 'w-full max-w-5xl mx-auto @container',
            header: 'w-full max-w-3xl last:mb-8 mx-auto @container',
            footer: 'w-full max-w-3xl last:mt-8 mx-auto @container',

            _type: 'twozone',
            _reverse: 'bottomTop'
        },


        bottomTop: {
            _:'## Zone 2 (full) above Zone 1 (1024px max)',
            base         : 'w-full relative flex flex-col-reverse',
            zone1        : 'w-full max-w-5xl @container',
            zone1__left  : 'w-full max-w-5xl mr-auto @container',
            zone1__center: 'w-full max-w-5xl mx-auto @container',
            zone1__right : 'w-full max-w-5xl ml-auto @container',

            _type: 'twozone',
            _reverse: 'topBottom'
        },

        bottomTopCenter: {
            _:'## Zone 2 (full) above Zone 1 (1024px max). Centered Zone 1 / Header / Footer.',
            base  : 'w-full relative flex flex-col-reverse',
            zone1 : 'w-full max-w-5xl mx-auto @container',
            header: 'w-full max-w-3xl last:mb-8 mx-auto @container',
            footer: 'w-full max-w-3xl last:mt-8 mx-auto @container',

            _type: 'twozone',
            _reverse: 'topBottomCenter'
        },

        leftRight: {
            _:'## Even width columns. Zone 1 left.',
            base             : 'w-full flex flex-col-reverse lg:flex-row',
            zone1            : 'w-full lg:w-1/2 @container',
            zone1__vertCenter: 'w-full lg:w-1/2 @container self-center',
            zone2            : 'w-full lg:w-1/2 @container',

            _type: 'twozone',
            _reverse: 'rightLeft'
        },

        leftFourFifths: {
            _:'## Even width columns. Zone 1 left.',
            base             : 'w-full flex',
            zone1            : 'w-4/5 @container',
            zone1__vertCenter: 'w-4/5 @container self-center',
            zone2            : 'w-1/5 @container',

            _type: 'twozone',
            _reverse: 'rightFourFifths'
        },

        rightFourFifths: {
            _:'## Even width columns. Zone 1 left.',
            base             : 'w-full flex',
            zone1            : 'w-1/5 @container',
            zone1__vertCenter: 'w-1/5 @container self-center',
            zone2            : 'w-4/5 @container',

            _type: 'twozone',
            _reverse: 'leftFourFifths'
        },

        checkerboard: {
            _:'## Even width columns. Zone 1 left.',
            base             : 'w-full flex flex-col-reverse lg:flex-row',
            zone1            : 'w-full lg:w-1/2 @container',
            zone1__vertCenter: 'w-full lg:w-1/2 @container self-center',
            zone2            : 'w-full lg:w-1/2 @container',

            _type: 'twozone',
            _reverse: 'rightLeft'
        },

        rightLeft: {
            _:'## Even width columns. Zone 1 right.',
            base             : 'w-full flex flex-col-reverse lg:flex-row-reverse',
            zone1            : 'w-full lg:w-1/2 @container',
            zone1__vertCenter: 'w-full lg:w-1/2 @container self-center',
            zone2            : 'w-full lg:w-1/2 @container flex',

            _type: 'twozone',
            _reverse: 'leftRight'
        },

        heavyLeft: {
            _:'## Wider width Zone 1 on the left.',
            base : 'w-full flex flex-col lg:flex-row',
            zone1: 'lg:w-3/5 @container',
            zone2: 'lg:w-2/5 @container',

            _type: 'twozone',
            _reverse: 'heavyRight'
        },

        heavyLeftReverse: {
            _:'## Wider width Zone 1 on the right.',
            base : 'w-full flex flex-col-reverse lg:flex-row-reverse',
            zone1: 'lg:w-3/5 @container',
            zone2: 'lg:w-2/5 @container',

            _type: 'twozone',
            _reverse: 'heavyRightReverse'
        },

        heavyRight: {
            _:'## Wider width Zone 2 on the right.',
            base : 'w-full flex flex-col lg:flex-row',
            zone1: 'lg:w-2/5 @container',
            zone2: 'lg:w-3/5 @container',

            _type: 'twozone',
            _reverse: 'heavyLeft'
        },

        heavyRightReverse: {
            _:'## Wider width Zone 2 on the left.',
            base : 'w-full flex flex-col-reverse lg:flex-row-reverse',
            zone1: 'lg:w-2/5 @container',
            zone2: 'lg:w-3/5 @container',

            _type: 'twozone',
            _reverse: 'heavyLeftReverse'
        },

        overlap: {
            _:'## Zone 2 behind Zone 1 (Full Width)',
            base : 'w-full overflow-hidden',
            zone1: 'p-10 max-w-3xl @container relative z-20',
            zone2: 'absolute inset-0 w-full h-full z-10',

            _type: 'twozone',
        }
    }
} | json_encode() | raw }}{% endmacro %}

        {# leftRightStagger: {
            base : 'w-full flex flex-col lg:flex-row',
            zone1: 'w-full lg:w-1/2 @container',
            zone2: 'w-full lg:w-1/2 @container pt-[50%]',

            _type: 'twozone',
            _reverse: 'rightLeftStagger'
        },

        rightLeftStagger: {
            base : 'w-full flex flex-col-reverse lg:flex-row-reverse',
            zone1: 'w-full lg:w-1/2 @container pt-[50%]',
            zone2: 'w-full lg:w-1/2 @container',

            _type: 'twozone',
            _reverse: 'leftRightStagger'
        }, #}



{% macro layout( layout, html, args = {} ) %}

    {% set json = _self.definitions() | json_decode %}
    {% set defs = json['defaults'] %}

    {## Test if the `layout` argument was passed as an array, which indicates a modifier ##}
    {## TODO: Describe Layout Modifiers ##}
    {% set modifier = null %}
    {% if ( layout|default() ) and layout is iterable %}
        {% set modifier = layout[1] %}
        {% set layout   = layout[0] %}
    {% endif %}

    {% set attr = json['options'][layout] ??? json['options']|first %}
    {% if attr._type|default() == 'twozone' %}
        {{ _self.twoZone( [layout, modifier], html, args ) }}
    {% endif %}
{% endmacro %}



{## Wrap a Two Zone Micro Layout around up-to 4 pieces of content
 ------------------------------------------------------------------------------------ ##

 {% import "_layout/core/microTwoZone" as grids %}

 {{ grids.generate( htmlToWrap, 'gridName' ) }}

 ------------------------------------------------------------------------------------ ##}
{% macro twoZone( layout, html, args = {} ) %}

    {## Parse arguments for adjustments we might want to make during rendering
     -------------------------------------------------------------------------------- ##}
    {% set args = {
        oAlign   : null,
        container: null,
    } | merge( args ) %}

    {## Test if the `layout` argument was passed as an array, which indicates a modifier ##}
    {## TODO: Describe Layout Modifiers ##}
    {% set modifier = null %}
    {% if layout ??? null and layout is iterable %}
        {% set modifier = layout[1] %}
        {% set layout   = layout[0] %}
    {% endif %}

    {% set json = _self.definitions() | json_decode %}
    {% set defs = json['defaults'] %}
    {% set attr = json['options'][layout] ??? json['options']|first %}

    {% set layoutContent %}

        {## header (if content provided) ##}
        {% if html[2] ??? null %}

            {## Adjust Header Alignment .. in cases where:

                - header is width restrictried to limit long paragraphs (i.e. max-w-5xl)
                - the opening line of content in the header is NOT justified left

                Why? Because otherwise, width-constricted text-zones with center/right justified
                text will appear offset until the browser width <= the max width of the zone.
            -------------------------------------------------------------------------------- ##}
            {% set headmod  = null %}
            {% set headAttr = html[2] | retconRemove( '.eyebrow' ) | retconChange( '[data-staging]', false ) | parseAttr %}
            {% set headmod  = ( 'text-center' in headAttr.class|default() or headAttr.style['text-align']|default() == 'center' ) ? 'center' : headmod %}
            {% set headmod  = ( 'text-left'   in headAttr.class|default() or headAttr.style['text-align']|default() == 'left'   ) ? 'left'   : headmod %}
            {% set headmod  = ( 'text-right'  in headAttr.class|default() or headAttr.style['text-align']|default() == 'right'  ) ? 'right'  : headmod %}


            {{ tag( 'header', {
                html : html[2],
                class: [ attr["header__#{headmod}"] ??? defs["header__#{headmod}"] ??? attr.header ??? defs.header ??? null ]
            }) }}
        {% endif %}

        {## zone base wrapper ##}
        {% tag 'div' with { data: { micro: layout }, class: [
            attr["base__#{modifier}"] ??? defs["base__#{modifier}"] ??? attr.base ??? defs.base ??? null,
            attr["gap__#{modifier}"]  ??? defs["gap__#{modifier}"]  ??? attr.gap  ??? defs.gap  ??? null,
        ],  } %}

            {# zone 1 content #}
            {% if html[0] ??? null %}

                {## Adjust Zone 1 Alignment .. in cases where:

                    - zone1 appears above or below zone2
                    - zone1 is width restrictried to limit long paragraphs (i.e. max-w-5xl)
                    - the opening line of content in zone1 is NOT justified left

                    Why? Because otherwise, width-constricted text-zones with center/right justified
                    text will appear offset until the browser width <= the max width of the zone.
                -------------------------------------------------------------------------------- ##}
                {% set zone1mod  = null %}
                {% if 'above' in layout|lower or 'bottom' in layout|lower %}
                    {% set zone1     = html[0] | retconRemove( '.eyebrow' ) | retconChange( '[data-staging]', false ) %}
                    {% set zone1Attr = zone1 | parseAttr %}
                    {% set zone1mod  = ( 'text-center' in zone1Attr.class|default() or zone1Attr.style['text-align']|default() == 'center' ) ? 'center' : zone1mod %}
                    {% set zone1mod  = ( 'text-left'   in zone1Attr.class|default() or zone1Attr.style['text-align']|default() == 'left'   ) ? 'left'   : zone1mod %}
                    {% set zone1mod  = ( 'text-right'  in zone1Attr.class|default() or zone1Attr.style['text-align']|default() == 'right'  ) ? 'right'  : zone1mod %}
                {% endif %}

                {{ tag( 'div', {
                    html : html[0],
                    data : { zone: 1 },
                    class: [ attr["zone1__#{zone1mod}"] ??? defs["zone1__#{zone1mod}"] ??? attr.zone1 ??? defs.zone1 ??? null ]
                }) }}
            {% endif %}

            {# zone 2 content #}
            {% if html[1] ??? null %}
                {{ tag( 'div', {
                    html : html[1],
                    data : { zone: 2 },
                    class: [ attr["zone2__#{modifier}"] ??? defs["zone2__#{modifier}"] ??? attr.zone2 ??? defs.zone2 ??? null ]
                }) }}
            {% endif %}
        {% endtag %}

        {## footer (if content provided) ##}
        {% if html[3] ??? null %}

            {% set footmod  = null %}
            {% set footAttr = html[3] | retconRemove( '.eyebrow' ) | retconChange( '[data-staging]', false ) | parseAttr %}
            {% set footmod  = ( 'text-center' in footAttr.class|default() or footAttr.style['text-align']|default() == 'center' ) ? 'center' : footmod %}
            {% set footmod  = ( 'text-left'   in footAttr.class|default() or footAttr.style['text-align']|default() == 'left'   ) ? 'left'   : footmod %}
            {% set footmod  = ( 'text-right'  in footAttr.class|default() or footAttr.style['text-align']|default() == 'right'  ) ? 'right'  : footmod %}

            {{ tag( 'footer', {
                html : html[3],
                class: [ attr["footer__#{footmod}"] ??? defs["footer__#{footmod}"] ??? attr.footer ??? defs.footer ??? null ]
            }) }}
        {% endif %}

    {% endset %}

    {## are we wrapping it in a container too? ##}
    {% import "_layout/core/containers" as containers %}
    {{ args.container
        ? containers.wrap( layoutContent, args.container )
        : layoutContent }}

{% endmacro %}