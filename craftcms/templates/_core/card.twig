{% extends template_from_string('{% block card %}{% endblock %}') %}

{## Primary Card Block
 ------------------------------------------------------------------------------------- ##
    This is the primary block for the card template. It is responsible for rendering
    the card's primary content, including the image, headline, text, and action.
    It also handles the card's layout and wrapping.
 ------------------------------------------------------------------------------------- ##}
{% block card__tag   "div" %}
{% block card__class "w-full relative @container" %}
{% block card__name  card.cardlayout|default('core') %}
{% block card__text  card.fulltext|default()  %}

{% block card -%}
    {% block card__open %}
        <{{ block('card__tag') }} {{ attr({
            class: block('card__class'),
            data : { name: block('card__name') }
        }) }}>
    {% endblock %}

    {% block card__content %}
        {% block card__image %}
            {% import "_core/assemble" as assemble %}
            {{ assemble.element( 'image', card.images, {}, settings ) }}
        {% endblock %}

        {{ block( 'card__headline' )}}

        {% block card__summary  card.summary|default()   %}

        {% block card__action   _self.action__invisiblecover( card, settings ) %}
    {% endblock %}

    {% block card__close %}</{{ block('card__tag') }}>{% endblock %}
{%- endblock %}


{% block card__headline tag( 'h3', { html: card.headline|default() } )%}






{## Card Rendering Macros
 ------------------------------------------------------------------------------------ ##

    Maintains path and inheritence consistency when generating content cards.

 ------------------------------------------------------------------------------------ ##
    Content specific cards can override and/or inject content into any part of
    the requested card layout. Default path: `_content/<sectionHandle>/card.twig`

    Variations for different entryTypes can generally be dealt with inside the
    section-level card file. If separate entryType specific card overrides are
    necessary, the card path below can be adjusted to something like:

    {% set cardPath = [
        "_content/#{section}/card.#{entryType}",
        "_content/#{section}/card",
    ] %}

    Content specific override cards are passed the desired card layout as a variable
    called `extends` which they should use to dynamically extend themselves from.
 ------------------------------------------------------------------------------------ ##}
{% macro single( content = null, card = {}, settings = {} ) %}
{%- if content -%}
    {% set cardlayout = card.cardlayout|default('core') %}
    {% set path       = card.path|default([ "_site/card.#{cardlayout}", "_site/card", "_core/card" ]) %}
    {% set section    = card.section|default() %}

    {% set headline   = card.headline|default( content.headline ??? content.title ??? null ) %}
    {% set summary    = card.summary|default( content.summary ??? content.dek ??? null ) %}
    {% set fulltext   = card.fulltext|default( content.text ??? summary ) %}
    {% set images     = card.images|default( content.images.all() ??? content.images ??? null ) %}
    {% set type       = card.type|default( content.type.handle ??? content.type ??? null ) %}
    {% set url        = card.url|default( content.url ??? null ) %}

    {% set headline   = headline | retconChange( 'p', false ) %}

    {% if content.id|default() and not section %}
        {% set section = 'ASSET'      in className( content ) | upper ? 'assets' %}
        {% set section = 'SUPERTABLE' in className( content ) | upper ? 'bits'   %}
    {% endif %}

    {% if content.text ??? null and not summary %}
        {% set summary = content.text | striptags | truncate( 150 ) %}
    {% endif %}

    {% set card = {
        cardlayout: cardlayout,
        url     : url,
        path    : path,
        section : section,
        content : content,
        summary : summary,
        headline: headline,
        fulltext: fulltext,
        images  : images,
        type    : type,
        loop    : settings.loop ??? null,
    } %}

    {{ include( card.path, { card: card, settings: settings }, withContext = false ) }}
{% endif %}{% endmacro %}




{## Click Cover Link
 ------------------------------------------------------------------------------------ ##
    The click cover link is a full-coverage link that can be used to make the entire
    card clickable without a specific button or link.

  ! Important: Ensure an appropriate parent element has `relative` applied,
    AND something like the below CSS exists within your project stylesheet.

    Otherwise the .click__cover class will do nothing and appear to not exist

    a.click__cover::before {
        @apply absolute content-[""] inset-0 z-20;
    }
 ------------------------------------------------------------------------------------ ##}
{% macro action__invisiblecover( card, settings ) -%}
    {%- if card.content.url|default() -%}
        {{ tag( 'a', {
            href : card.content.url,
            class: 'click__cover',
            html : '<span class="hidden">Read More â†’</span>',
        } ) }}
    {%- endif -%}
{%- endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Modal Content (Basic)
 ------------------------------------------------------------------------------------ ##
    Creates a modal window that will load on-click to display extended card info.
 ------------------------------------------------------------------------------------ ##}
{% macro action__modal( card, settings ) -%}
    {% import "_core/card" as cards %}

    {% set modal      = card.modal|default('_site/component.modal') %}
    {% set cardlayout = card.modalcard|default('panel') %}

    {% set modalcard = {
        section: card.section|default(),
        cardlayout: cardlayout,
        path: [
            "_site/card.#{cardlayout}",
            "_site/card",
            "_core/card"
        ]
    } %}

    {% set html = cards.single( card.content, modalcard, settings ) %}

    {% embed modal with { html: html } %}
        {% block content html %}
        {% block triggerclass "self-baseline relative z-40 text-center" %}
    {% endembed %}

{%- endmacro %}



{## Card Title Shortcut
 ------------------------------------------------------------------------------------ ##
    Card Titles are typically used for things like tab names or accordion headers.

    {% from "_cards/base" import title as cardTitle %}
    {{ cardTitle( item, 'summary', { additional: 'settings' } ) }}
 ------------------------------------------------------------------------------------ ##}
{% macro title( item ) -%}
    {{ item.headline ??? item.title ??? null
        | retconRemove( [ 'img', 'figure', 'iframe' ] )
        | retconChange( [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'ol', 'ul', 'li', 'blockquote', 'div', 'a' ], '' )
        | trim
    }}
{%- endmacro %}



{## Text Link
 ------------------------------------------------------------------------------------ ##
    Like the Default Action, but uses a visible text-based (non-button) link
 ------------------------------------------------------------------------------------ ##}

{#
{% block action_textlink %}
    {%- if card.item.url|default() -%}
        <div class="flex">
            <a href="{{card.item.url}}" class="clickCover buttonText"
                >Read More</a>
        </div>
    {%- endif -%}
{% endblock %} #}
