{## Matrix Block & Builder Macros
{-------------------------------------------------------------------------------------##
    This file mostly contains macros for assembling matrix blocks and builders.

    It *can* be inherited as a base block, but ideally only as a last resort fallback.

    A more robust block base should be created in `_site/block`, which all default
    blocks already look for in their inheritence chain before falling back to this file.
{-------------------------------------------------------------------------------------##}
{% extends template_from_string('{% block block %}{% endblock %}') %}
{## --------------------------------------------------------------------------------- ##}

{% import "_assemble" as assemble %}

{## Yes, this is a valid name. Silly, right? ##}
{% block block %}

    {% set block = block ??? null %}
    {% set settings = block.settings ??? null is null ? {} : block.settings %}

    {% set settings = settings | merge({
        block__first: loop.first ??? false,
        block__last : loop.last  ??? false,
    }) %}

    {## Spacer between blocks (Before) ##}
    {% set includebefore = settings.includebefore ??? null %}
    {% block before assemble.blockspacer( block, includebefore, settings ) %}

    {## Theme block + open theme tag ##}
    {% block theme %}
    {% block theme__open assemble.blockpart( block, 'themeopen', settings ) %}

        {## Section block + content ##}
        {% block section %}
            {% block open assemble.blockpart( block, 'contentopen', settings ) %}
            {% block content block('block__html') %}
            {% block close assemble.blockpart( block, 'contentclose', settings ) %}
        {% endblock %}

    {## Close theme tag + block  ##}
    {% block theme__close assemble.blockpart( block, 'themeclose', settings ) %}
    {% endblock theme %}

    {## Spacing between blocks (After) ##}
    {% set includeafter = settings.includeafter ??? null %}
    {% block after assemble.blockspacer(  block, includeafter, settings ) %}
{% endblock %}


{% block block__html -%}
    {% if block.html ??? null %}
        {% set container = block.settings.container ??? 'default' %}
        {{ assemble.container( container, block.html ) }}
    {% else %}
        {{- block('block__text') ??? '' -}}
    {% endif %}
{%- endblock %}


{% block block__text -%}
    {{- block.text ??? '' -}}
{%- endblock %}




{## Open Theme
{-------------------------------------------------------------------------------------##
    Opens a theme wrapper inside a block (or anywhere else really)
{-------------------------------------------------------------------------------------##}
{% macro themeopen( block, settings = null ) -%}
    {% set settings = settings is null ? {} : settings %}

    {% set opentag  = settings.theme__tag   ??? "div" %}
    {% set class    = settings.theme__class  ?? "theme relative" %}

    {% set themedata = {
        onscroll: true,
        theme   : settings.theme      ??? "default",
        block   : settings.blocktype  ??? "default",
        'next-theme': settings.next.theme ??? null,
        'prev-theme': settings.prev.theme ??? null,
    } %}

    {## We only open the theme tag if it's different from the previous block ##}
    {%- if themedata['prev-theme'] != themedata.theme -%}
        {{ raw( "<#{opentag} " ~  attr({ class: class, data: themedata } ) ~ ">" ) }}
    {%- endif -%}

    {## BUT we need to add a spacer regardless as it creates a buffer between theme
        edge and its content, but also between consecutive blocks of the same theme.
     -------------------------------------------------------------------------------- ##}
    {% set spacerabove = settings.spacerabove ?? 'default' %}
    {% set spacerabove = (settings.spacerfirst ??? null) and (settings.block__first ??? null )
        ? settings.spacerfirst
        : spacerabove %}

    {% if spacerabove %}
        {% import "_assemble" as assemble %}
        {{ assemble.blockspacer( block, spacerabove, settings ) }}
    {% endif %}
{% endmacro %}



{% macro themeclose( block, settings ) %}
    {% import "_assemble" as assemble %}

    {% set settings = settings is null ? {} : settings %}

    {% set settings = {
        tag      : settings.tag         ?? settings.themetag ?? "div",
        theme    : settings.theme       ?? "base",
        themenext: settings.themenext   ?? null,
        spacer   : settings.spacerbelow ?? settings.spacerbelow ?? 'default',
    } %}

    {## We only close the theme tag if it's different from the next block, and
        unlink openTheme(), we only add a spacer if we're closing the theme
     -------------------------------------------------------------------------------- ##}
    {%- if settings.themenext != settings.theme and settings.spacer -%}
        {{ assemble.blockspacer( block, settings.spacer, settings ) }}
        </{{settings.tag}}>
    {%- endif -%}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{% macro contentopen( block, settings = null ) -%}
    {% set settings = settings is null ? {} : settings %}
    {% set opentag  = settings.block__tag  ??? settings.tag  ??? "section" %}
    {% set class    = settings.block__class ?? settings.class ?? "w-full relative z-20" %}

    {% set blockdata = {
        blocktype : settings.block__type  ?? settings.blocktype ?? 'default',
        firstblock: settings.block__first ?? false,
        lastblock : settings.block__last  ?? false,
        bodylayer : "default",
        bodytext  : true,
    } %}

    {{ raw( "<" ~ opentag ~ " " ~ attr({ class: class, data: blockdata } ) ~ ">" ) }}
{%- endmacro %}

{% macro contentclose( block, settings ) -%}
    {% set settings = settings is null ? {} : settings %}
    {% set closetag = settings.block__tag ??? settings.tag ??? "section" %}
    {{ raw( "</#{closetag}>" ) }}
{%- endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Default Block Spacer
{-------------------------------------------------------------------------------------##
{-------------------------------------------------------------------------------------##}
{% macro spacer__default() %}{{ tag( 'div', { style: 'height: 100px;' } ) }}{% endmacro %}




{## Reusable Content (Fragments & Bits)
{-------------------------------------------------------------------------------------##

{-------------------------------------------------------------------------------------##}
{# {% macro fragment( query = null, builder = 'content', settings = {} ) %}
    {%- if query.id ??? query.slug ??? query.preset ??? null -%}
        {% set fragment = craft.entries({section:"reusable"}|merge( query )).one() ??? null %}
        {% if fragment %}
            {{ _self.findBlockOrBuilder( null, builder, fragment, settings ) }}
        {% endif %}
    {%- endif -%}
{% endmacro %} #}
{## --------------------------------------------------------------------------------- ##}