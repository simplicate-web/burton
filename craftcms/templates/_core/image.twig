{% extends template_from_string('{% block image %}{% endblock %}') %}

{% block image block('figure') %}

{% block img__tag          img     ?? null %}
{% block img__caption      caption ?? ""   %}

{% block figure__class     "relative z-20" %}
{% block figcaption__class "text-sm" %}

{% block source            "" %}
{% block picture           raw( "<picture>" ~ block( 'source' ) ~ block( 'img__tag' ) ~ "</picture>" ) %}

{% block figcaption -%}
    {%- set caption = block('img__caption') | trim -%}
    {{- caption ? tag( 'figcaption', { class: block('figcaption__class'), html: caption } ) : "" -}}
{%- endblock %}

{## If `figure` is passed as a string, use it as a class.
    If it's is passed as null, don't output a <figure> wrapper.
    If passing an object, expect that it will be used in the tag() function ##}
{% block figure -%}
    {%- set figure = figure ?? {} -%}
    {%- set picture = block('picture') | trim -%}
    {%- if picture -%}
        {%- set picture = picture ~ block('figcaption') | trim %}
        {%- set figure = figure is not null and figure is not iterable
            ? { class: figure, html: picture }
            : { class: block('figure__class'), html: picture } | merge( figure ) -%}
        {{- figure ? tag( 'figure', figure ) : raw( picture ) -}}
    {%- endif -%}
{%- endblock %}



{% macro default( images, settings = null ) -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {{- include( ['_site/image', '_core/image'], {
        img: _self.imgtag( images, {
            class: "w-full max-w-full h-auto",
        } )
    } ) -}}
{%- endmacro %}
{## --------------------------------------------------------------------------------- ##}


{## Basic <img> tag
{-------------------------------------------------------------------------------------##
    You can pass it as many images as you like, but we're only gonna use the first one.
{-------------------------------------------------------------------------------------##}
{% macro imgtag( image, frame = null ) %}

    {% set first = null %}
    {% if image is iterable and image.one() ??? null %}
        {% set first = image|first %}
    {% endif %}

    {% if not first and image.url ??? null %}
        {% set first = image %}
    {% endif %}

    {% if not first and image is iterable %}
        {% set first = image|first %}
    {% endif %}

    {% if not first and image starts with 'http' %}
        {% set first = image %}
    {% endif %}

    {%- if first -%}
        {% set class = frame.class ?? "max-w-full" %}
        {% if attribute(first, 'getUrl') ??? null %}
            {# {% if frame.transform|default() and first.url|default() and first.id|default() %}
                {% do first.setTransform( frame.transform ) %}
            {% endif %} #}

            {% set transform = frame.transform ?? null %}
            {% set doit      = transform %}
            {% set doit      = false %}
            {% set source    = doit ? first.getUrl(transform)    : first.url %}
            {% set width     = doit ? first.getWidth(transform)  : first.width  ?? null %}
            {% set height    = doit ? first.getHeight(transform) : first.height ?? null %}

            {{ tag( 'img', {
                src    : source,
                width  : width,
                height : height,
                class  : class,
                loading: 'lazy'
            }) }}
        {% else %}
            {% set imgurl = ( image.url ??? first ) | lower %}
            {% if imgurl starts with 'http' or imgurl starts with '//' %}
                {{ tag( 'img', {
                    src    : imgurl,
                    class  : class,
                    loading: 'lazy'
                }) }}
            {% endif %}
        {% endif %}
    {% else %}
        {{ _self.placeholder( frame ) }}
    {%- endif -%}
{% endmacro %}



{## Placeholder images (for wireframing & development)
{-------------------------------------------------------------------------------------##}
{% macro placeholder( settings = {} ) %}{% if getenv('CRAFT_ENVIRONMENT') != 'production' -%}
    {% set type   = settings._placeholder|default('default') %}
    {% set width  = type == 'icon' ? 170 : 900 %}
    {% set height = type == 'icon' ? 170 : 500 %}
    {% set source = type == 'icon'
        ? "https://placeskull.com/#{width}/#{height}/475569/#{random(1,24)}"
        : "https://picsum.photos/seed/#{random(1,9999)}/#{width}/#{height}?grayscale&blur=2" %}

    {{- tag( 'img', {
        src: source,
        alt: "Placeholder #{type}",
        class: settings.class|default('placeholder')
    } ) -}}
{%- endif %}{% endmacro %}


{#
Outputs an SVG to be used as an image placeholder, optionally including target dimensions.

@var width          int     Desired element width
@var height         int     Desired element height
@var showDimensions bool    Whether to display target dimensions (defaults to `true`)
@var fill           string  Background fill color (defaults to `'#D0D0D0'`)
#}
{# {% set showDimensions = showDimensions ?? true %}
{% set fill = fill ?? '#D0D0D0' %}
<svg class="{{ class ?? '' }}"
     xmlns="http://www.w3.org/2000/svg"
     width="{{ width }}"
     height="{{ height }}"
     viewBox="0 0 {{ width }} {{ height }}"
>
  <g clip-path="url(#clip0)">
    <rect fill="{{ fill }}" width="{{ width }}" height="{{ height }}"/>
    <line x1="0" y1="0" x2="{{ width }}" y2="{{ height }}" stroke="rgba(255,255,255,0.3)"/>
    <line x1="0" y1="{{ height }}" x2="{{ width }}" y2="0" stroke="rgba(255,255,255,0.3)"/>
  </g>
  <text fill="rgba(0,0,0,0.1)"
        font-family="ui-sans-serif,system-ui,-apple-system,sans-serif"
        font-size="16"
        dy="3%"
        font-weight="thin"
        x="50%"
        y="50%"
        text-anchor="middle"
  >
    {%- if showDimensions %}
      {{ width }} Ã— {{ height }}
    {% endif -%}
  </text>
</svg> #}


{## --------------------------------------------------------------------------------- ##}