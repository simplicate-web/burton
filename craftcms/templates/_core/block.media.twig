{## Media Block   [Core Template]
{---------------------------------------------------------------------------------------}
  > http://localhost:8000/sitehub/blocks/media
{-------------------------------------------------------------------------------------##}
{% extends [ "_site/block", "_core/block" ] %}


{## Template Variables & Defaults
{-------------------------------------------------------------------------------------##}
{%- set block = block ?? {} -%}

{%- set settings = block.settings ?? null -%}
{%- set settings = settings is not null and settings is iterable ? settings : {} -%}


{## Zone 2 Content / Variant Routing
{-------------------------------------------------------------------------------------##}
{% block block__zone2 %}

    {%- set settings = {
        variant   : null,
        textlayer : 'default',
        limit     : 24,
        source    : 'media',
        mediadeck : 'default',
        medialayer: 'default',
    } | merge( settings ) -%}

    {%- set mediaitems = [] -%}

    {## Item Source: Media Field
    {-----------------------------------------------------------------------------##}
    {%- if settings.source == 'media' -%}
        {%- set mediaitems = block.media.all() ??? block.media ??? [] -%}
    {%- endif -%}


    {## Item Source: External Embed via URL
    {-------------------------------------------------------------------------------}
        MediaBase() documentation coming. But basically it's oembed.
    {-----------------------------------------------------------------------------##}
    {%- if settings.source == 'external' -%}
        {%- set mediaurls = block.external.all() ??? block.external ??? [] -%}
        {%- for item in mediaurls -%}
            {%- set url = item.sourceUrl ??? item.url ??? null -%}
            {%- if url -%}
                {%- set oembed = MediaBase( url ) -%}
                {## TODO: Add items.images to eager loading ##}
                {%- set mediaitems = mediaitems|merge([{
                    _media   : item,
                    url      : url,
                    kind     : 'external',
                    oembed   : oembed,
                    images   : item.images.one() ? item.images.all() : [],
                    summary  : item.summary  ??? oembed.summary ??? null,
                    headline : item.headline ??? oembed.title   ??? null,
                }]) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}


    {## Item Source: Collection
    {-------------------------------------------------------------------------------}
        When loading from a Collection, using `CollectionResults()` is easier than
        rewriting the query inline each time you need it -- or trying to implement
        it as an inline Twig macro.

        CollectionResults() is a PHP Twig macro that returns a query object based
        on the search params passed into it. It is editable here:

        -> `craftcms/modules/sitemodule/src/twigextensions/CollectionBaseTwig.php`
    {-----------------------------------------------------------------------------##}
    {% if settings.source == 'collect' %}
        {%- set collections = block.collections ?? [] -%}
        {%- set collections = collections is iterable ? collections : [] -%}
        {%- set mediaitems = CollectionResults( collections, {
            limit : settings.limit,
            static: 'media'
        } ) -%}
    {% endif %}

    {## Let's us inherit from this template **at this point** in the render process,
        without requiring that we duplicate the above "collection" logic ##}
    {%- set blockname = 'media__' ~ settings.variant -%}
    {{- block( blockname ) is defined ? block( blockname ) : block( 'media__default' ) -}}
{% endblock %}



{## Media Default
{-------------------------------------------------------------------------------------##}
{% block media__default %}
    {%- set settings = settings ?? block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = { mediadeck: 'default' } | merge( settings ) -%}

    {%- import "_assemble" as assemble -%}
    {{- assemble.media( settings.mediadeck, mediaitems, settings ) -}}
{% endblock %}



{## Media Third Party Embed
{-------------------------------------------------------------------------------------##}
{% block media__code %}
    {%- set settings = settings ?? block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = { mediadeck: 'default' } | merge( settings ) -%}

    {{ block.code | retconOnly('iframe') | retconAttr( 'iframe', {
        class : 'aspect-video',
        width : false,
        height: false,
    })  }}
{% endblock %}