{## Normalize and build a group of Matrix Blocks
 ------------------------------------------------------------------------------------ ##
    - Read about normalizeBlocks() below.
    - How to use:

        {% import "_core/blocks/assemble" as blocks %}
        {{ blocks.assemble( entry.matrixFieldHandle.all(), "builderHandle", {
            container: "fluid"
        } ) }}

 ------------------------------------------------------------------------------------ ##}
{% macro assemble( blocks, builder, settings ) -%}
    {% set settings = {
        container: "none"
    } | merge( settings ) %}


    {{ _self.builder( normalizeBlocks( blocks, builder, settings ), builder )}}
{% endmacro %}



{## Render a Group of Normal Blocks
 ------------------------------------------------------------------------------------ ##
    For each block in the builder, the first template that exists in the Block Lookup
    Path will be used to render that respective block.

    - Defaults to `_core/blocks/%blockType%.twig` if no other template exists.
    - See below for sample Block Lookup Path with tokens replaced.
    - Read about normalizeBlocks() below.
    - How to use:

        {% import "_core/blocks/assemble" as blocks %}
        {{ blocks.builder( arrayOfNormalBlocks, "builderHandle" ) }}

 ------------------------------------------------------------------------------------ ##}
{% macro builder( blocks = [], builder = null ) %}

    {% set path = [
        "_site/content/%section%/blocks/%builder%/%blockType%.%entryType%.%layout%",
        "_site/content/%section%/blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_site/content/%section%/blocks/%builder%/%blockType%.%entryType%",
        "_site/content/%section%/blocks/%builder%/%blockType%.%layout%",
        "_site/content/%section%/blocks/%builder%/%blockType%.%variant%",
        "_site/content/%section%/blocks/%builder%/%blockType%",
        "_site/content/%section%/blocks/%blockType%.%entryType%.%layout%",
        "_site/content/%section%/blocks/%blockType%.%entryType%.%variant%",
        "_site/content/%section%/blocks/%blockType%.%entryType%",
        "_site/content/%section%/blocks/%blockType%.%layout%",
        "_site/content/%section%/blocks/%blockType%.%variant%",
        "_site/content/%section%/blocks/%blockType%",
        "_site/content/blocks/%builder%/%blockType%.%entryType%.%layout%",
        "_site/content/blocks/%builder%/%blockType%.%entryType%.%variant%",
        "_site/content/blocks/%builder%/%blockType%.%entryType%",
        "_site/content/blocks/%builder%/%blockType%.%layout%",
        "_site/content/blocks/%builder%/%blockType%.%variant%",
        "_site/content/blocks/%builder%/%blockType%",
        "_site/content/blocks/%blockType%.%entryType%.%layout%",
        "_site/content/blocks/%blockType%.%entryType%.%variant%",
        "_site/content/blocks/%blockType%.%entryType%",
        "_site/content/blocks/%blockType%.%layout%",
        "_site/content/blocks/%blockType%.%variant%",
        "_site/content/blocks/%blockType%",
        "_core/blocks/%blockType%",
    ] %}

    {% for block in blocks %}
        {{ include( path | map( p => p|replace({
            '%section%'  : block.settings.section   ??? null,
            '%builder%'  : block.settings.builder   ??? null,
            '%blockType%': block.settings.blockType ??? null,
            '%entryType%': block.settings.entryType ??? null,
            '%variant%'  : block.settings.variant   ??? null,
        }) ), { block: block }, withContext = false ) }}
    {% endfor %}
{% endmacro %}


{## Sample Block Lookup Path
 ------------------------------------------------------------------------------------ ##
    This is how the block path look based on the following sample token replacement:

      %section%   -> articles
      %builder%   -> content
      %blockType% -> collection
      %entryType% -> blog
      %layout%    -> topBottom
      %variant%   -> summary

    path = [
        _site/content/articles/blocks/content/collection.blog.topBottom.twig
        _site/content/articles/blocks/content/collection.blog.summary.twig
        _site/content/articles/blocks/content/collection.blog.twig
        _site/content/articles/blocks/content/collection.topBottom.twig
        _site/content/articles/blocks/content/collection.summary.twig
        _site/content/articles/blocks/content/collection.twig
        _site/content/articles/blocks/collection.blog.topBottom.twig
        _site/content/articles/blocks/collection.blog.summary.twig
        _site/content/articles/blocks/collection.blog.twig
        _site/content/articles/blocks/collection.topBottom.twig
        _site/content/articles/blocks/collection.summary.twig
        _site/content/articles/blocks/collection.twig
        _site/content/blocks/content/collection.blog.topBottom.twig
        _site/content/blocks/content/collection.blog.summary.twig
        _site/content/blocks/content/collection.blog.twig
        _site/content/blocks/content/collection.topBottom.twig
        _site/content/blocks/content/collection.summary.twig
        _site/content/blocks/content/collection.twig
        _site/content/blocks/collection.blog.topBottom.twig
        _site/content/blocks/collection.blog.summary.twig
        _site/content/blocks/collection.blog.twig
        _site/content/blocks/collection.topBottom.twig
        _site/content/blocks/collection.summary.twig
        _site/content/blocks/collection.twig
        _core/blocks/collection.twig
    ]
 ------------------------------------------------------------------------------------ ##}


{## normalizeBlocks() is a Custom Twig Function¹ Responsible for:
 ------------------------------------------------------------------------------------ ##
    - Splicing Fragments Blocks into the block list
    - Merging block attributes and reference fields into a single "settings" object
    - Relocating hard to access details about each block, its contents, and its
      relatives, and placing them in more consistent and accessible location
      within the block object.

    While not strictly necessary, this custom macro is a cleaner alternative than
    attempting all of the above solely in Twig. The code needed to parse and generate
    even minimally complex nested data structures in Twig reads like poop.

 ------------------------------------------------------------------------------------ ##

    ¹ The PHP code for this twig function is editable within a local module² rather
      than a plugin. This is so that it's easier to make changes to this rather basic
      but important bit of code on a per-site basis.

    ² craftcms/modules/gearbox/src/twigextensions/NormalizeBlockTwigExtension.php

 ------------------------------------------------------------------------------------ ##}