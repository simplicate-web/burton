{## Media Elements   [Core Template]
{-------------------------------------------------------------------------------------##}
{% extends template_from_string('{% block media__skeleton "" %}') %}


{## Template Variables
{---------------------------------------------------------------------------------------}

{-------------------------------------------------------------------------------------##}
{# one or more media items to generate a tag for #}
{%- set mediaitems = mediaitems ?? null -%}
{%- set mediaitems = mediaitems is not null and mediaitems is iterable ? mediaitems : [] -%}
{%- set mediaitems = ( item ?? null ) ? mediaitems | merge([item]) : mediaitems -%}

{# media item to render #}
{#
{%- set item = item is null and mediacount == 1 ? mediaitems|first : item %}

{# caption text / html #}
{# {%- set caption = caption ??? null -%} #}

{# attributes for the <figure> tags #}
{# {%- set figure = figure ??? null -%}
{%- set figure = figure is not null and figure is iterable ? figure : {} -%}
{%- set figure = {
    class: block('figure__class')
} | merge( figure ) -%} #}

{# settings object #}
{%- set settings = settings ??? null -%}
{%- set settings = settings is not null and settings is iterable ? settings : {} -%}
{%- set settings = {
    'medialayer': 'default',
} | merge( settings ) -%}



{## Default Configuration
{---------------------------------------------------------------------------------------}
{-------------------------------------------------------------------------------------##}
{% block audio__class        audio__class       ?? "block w-full max-w-4xl bg-[#f1f3f4]" %}
{% block audio__posterclass  audio__posterclass ?? "block w-full h-48" %}
{% block audio__figureclass  audio__figureclass ?? "flex flex-col w-full" %}

{% block video__class        video__class       ?? "w-full aspect-video" %}
{% block video__posterclass  video__posterclass ?? "absolute inset-0 z-20 object-cover" %}
{% block video__figureclass  video__figureclass ?? "relative aspect-video w-full" %}

{% block iframe__class       iframe__class      ?? "w-full h-auto" %}



{## Render HTML
{---------------------------------------------------------------------------------------}
    This is where the actual HTML is generated for whatever type of media is being
    rendered: <video>. <audio>, <iframe>, etc.
{-------------------------------------------------------------------------------------##}
{% block media__skeleton %}
    {%- for item in mediaitems -%}
        {% if item.kind ?? null %}
            {%- block item -%}
                {{- item.kind == 'external'
                    ? block('media__external') -}}
                {{- item.kind == 'audio' and item.url ??? null
                    ? block('media__audio') -}}
                {{- item.kind == 'video' and item.url ??? null
                    ? block('media__video') -}}
            {%- endblock %}
        {% endif %}
    {%- endfor %}
{% endblock %}


{% block media__sources -%}
    {%- if item.url ??? null and item.mimeType ??? null -%}
        <source src="{{item.url}}" type="{{item.mimeType}}"/>
    {%- endif %}
{% endblock %}

{% block media__transcript -%}
    {%- if item.transcript ??? null %}
        <a href="#">Transcript Available</a>
    {%- endif -%}
{%- endblock %}

{%- block audio__sources block( 'media__sources' ) -%}
{%- block video__sources block( 'media__sources' ) -%}

{%- block audio__transcript block( 'media__transcript' ) -%}
{%- block video__transcript block( 'media__transcript' ) -%}


{% block media__external -%}
{%- if item.oembed.html ??? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set source = item.oembed.provider ??? null -%}
    {%- if source == 'youtube' or source == 'vimeo' -%}
        {{- block( 'media__video' ) -}}
    {%- else %}{{
        item.oembed.html | retconAttr( 'iframe', {
            class : settings.iframeclass ?? block('iframe__class'),
            width : false,
            height: false,
    }) }}{% endif -%}
{%- endif %}{% endblock %}


{% block media__audio -%}
{%- if item ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}

    {%- set medialayer = medialayer ??? settings.medialayer ??? 'default' -%}
    {%- set uuid = 'audio_' ~ create('craft\\helpers\\StringHelper').UUID() | camel -%}

    {## Prepare Audio Tag ##}
    {%- set audio = audio ?? {} -%}
    {%- set audio = audio is not null and audio is not iterable ? { class: audio } : audio %}
    {%- set audio = {
        id      : uuid,
        'x-ref' : uuid,
        controls: true,
        preload : true,
        class   : settings.audio__class ?? block('audio__class') ?? "",
        html    : block('audio__sources')
    } | merge( audio ) -%}

    {% set audiotag = tag( 'audio', audio ) -%}

    {## Prepare Poster / Cover Image ##}
    {%- set poster = poster ?? {} -%}
    {%- set poster = poster is not null and poster is not iterable ? { class: poster } : poster -%}
    {%- set poster = {
        imgclass: settings.audio__posterclass ?? settings.posterclass ?? block('audio__posterclass'),
    } | merge( poster ) -%}

    {## Prepare Figure wrapper (just in case) ##}
    {%- set figure = figure ?? {} -%}
    {%- set figure = figure is not null and figure is not iterable ? { class: figure } : figure -%}
    {%- set figure = {
        class: settings.audio__figureclass ?? settings.figureclass ?? block('audio__figureclass'),
        'x-data': '{
            open: false,
            toggle() {
                this.open = true
                this.$nextTick( () => {
                    const player = document.querySelector("#' ~ uuid ~ '")
                    if( player ) { player.paused ? player.play() : player.pause() }
                })
            }
        }',
    } | merge( figure ) -%}

    {## Prepare the <img> tag for the poster image ##}
    {%- from "_core/image" import imgtag -%}
    {%- set imgtag = imgtag(item.images, poster) ?? null -%}

    {## Add simple alpine JS click to toggle the poster image ##}
    {%- set imgtag = imgtag ? raw( imgtag | attr({
        'x-on:click': "toggle",
        class: "cursor-pointer"
    }) ) %}

    {## Prepare the transcript link ##}
    {% set transcript = block( 'audio__transcript' ) ??? null %}

    {% set audiohtml = raw ( audiotag ~ transcript ) %}

    {## If a poster img exists, wrap a <figure> around the <img> and <audio> tags ##}
    {%- if imgtag -%}
        {%- embed ['_site/image', '_core/image'] with {
            imgtag   : imgtag,
            figure   : figure,
            settings : settings,
            audiohtml: audiohtml
        } only %}
            {% block caption audiohtml %}
            {% block captiontag "div" %}
        {% endembed -%}

    {## Otherwise just output the <audio> element ##}
    {%- else %}{{ audiohtml }}{% endif -%}
{%- endif %}{% endblock %}



{% block media__video -%}
{%- if item ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}

    {% set uuid = 'video_' ~ create('craft\\helpers\\StringHelper').UUID() | camel %}

    {## Prepare Video Tag ##}
    {%- set video = video ?? {} -%}
    {%- set video = video is not null and video is not iterable ? { class: video } : video %}
    {%- set video = {
        id      : uuid,
        'x-ref' : uuid,
        controls: true,
        preload : true,
        class   : settings.video__class ?? block('video__class') ?? "",
        html    : block( 'video__sources' )
    } | merge( video ) -%}
    {% set videotag = tag( 'video', video ) -%}

    {## Prepare Poster / Cover Image ##}
    {%- set poster = poster ?? {} -%}
    {%- set poster = poster is not null and poster is not iterable ? { class: poster } : poster -%}
    {%- set poster = {
        imgclass: settings.video__posterclass ?? settings.posterclass ?? block('video__posterclass'),
    } | merge( poster ) -%}

    {## Prepare Figure Wrapper (just in case) ##}
    {%- set figure = figure ?? {} -%}
    {%- set figure = figure is not null and figure is not iterable ? { class: figure } : figure -%}
    {%- set figure = {
        class: settings.video__figureclass ?? settings.figureclass ?? block('video__figureclass'),
        'x-data': "{
            open: false,
            play() {
                this.open = true
                $nextTick(() => { $refs.#{uuid}.play() } )
            }
        }",
    } | merge( figure ) -%}


    {## Prepare the <img> tag for the poster image ##}
    {%- from "_core/image" import imgtag -%}
    {%- set imgtag = imgtag(item.images ??? null, poster) ?? null -%}

    {% set medialayer = medialayer ??? settings.medialayer ??? 'default' %}

    {## Is this an external video embed? ##}
    {% if item.oembed.html ??? null %}
        {% set videotag = item.oembed.html
            | retconAttr( 'iframe', { height: false, width: false, class: video.class } ) %}

        {%- set figure = {
            'x-data': "{
                open: false
            }",
        } | merge( figure ) -%}

        {% if videotag and imgtag and medialayer != 'default' %}
            {% set videotag -%}
                <template x-if="open">
                    {{ raw( videotag | replace({
                        '?feature=oembed': '?feature=oembed&autoplay=1&mute=1&enablejsapi=1'
                    }) ) }}
                </template>
            {%- endset %}
        {% endif %}
    {% endif %}

    {## Add simple alpine JS click to toggle the poster image ##}
    {%- set imgtag = imgtag and medialayer != 'default' ? raw( imgtag | attr({
        'x-on:click': "play",
        'x-show': "!open",
        class: "cursor-pointer"
    }) ) %}

    {## Prepare the transcript link ##}
    {% set transcript = block( 'video__transcript' ) ??? null %}

    {% set videohtml  = raw( videotag ~ transcript ) %}

    {## If a poster img exists, wrap a <figure> around the <img> and <video> tags ##}
    {%- if imgtag -%}
        {%- embed ['_site/image', '_core/image'] with {
            imgtag   : imgtag,
            figure   : figure,
            settings : settings,
            videohtml: videohtml,
        } only %}
            {% block caption videohtml %}
            {% block captiontag "div" %}
        {% endembed -%}

    {## Otherwise just output the <video> element ##}
    {%- else %}{{ videohtml }}{% endif -%}
{%- endif %}{% endblock %}



{## Default Media Frame ##}
{% macro default( media, settings = null ) -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set single = ( media.id ??? null or media.url ??? null ) ? media : null %}
    {%- set single = ( single is null and media | length == 1 ) ? media | first : single -%}

    {{- single ? include(['_site/media', '_core/media'], {
        item    : single,
        settings: settings
    }, withContext = false ) -}}

    {{- single is null and media is iterable ? include(['_site/media', '_core/media'], {
        mediaitems: media,
        settings: settings
    }, withContext = false ) -}}
{% endmacro %}


{% macro randomize( items, settings ) -%}
    {{- _self.single( shuffle(items), settings ) -}}
{%- endmacro %}


{% macro single( items, settings = null ) -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = { medialayer: 'default' } | merge(settings) -%}
    {%- import "_assemble" as assemble -%}
    {{- assemble.media( settings.medialayer, items|first, settings ) -}}
{%- endmacro %}



{## Basic Two/Three Column Grids
{---------------------------------------------------------------------------------------}
 !! IMPORTANT CAVEAT: Unlike Cards that have a deck iterator and a card layout,
    media macros are assumed to handle one or both cases at the same time.

    Specifically, in the case of these grid macros, the `medialayer` *MUST BE CHANGED*
    to something else before running them through `assemble.media()` again.

    Otherwise, they'll try to loop back on themselves and re-run the `grid2` or `grid3`
    `medialayer` again, ending up in an infinite loop.

    This will be changed in a future version to more explicit and separate iterator
    and frame macros.
{-------------------------------------------------------------------------------------##}
{% macro media__grid( gridlayout, media, settings = null ) %}
    {%- set gridlayout = gridlayout ?? 'default' -%}

    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {%- set settings = settings | merge( { gridlayout: gridlayout, medialayer: 'default' } ) -%}

    {%- import "_assemble" as assemble -%}

    {%- set media = media ?? null -%}
    {%- set media = media is not null and media is iterable ? media : [] -%}
    {%- set media = media | map( item => assemble.media( settings.medialayer, item, settings ) ) -%}

    {{- assemble.gridlayout( settings.gridlayout, media|join , settings ) -}}
{% endmacro %}

{% macro grid2( media, settings = null ) -%}
    {{- ( media ?? null and media|length == 1 )
        ? _self.media__grid( 'single', media, settings )
        : _self.media__grid( 'flexible2', media, settings )
    -}}
{%- endmacro %}

{% macro grid3( media, settings = null ) -%}
    {{- ( media ?? null and media|length < 3 )
        ? _self.grid2( media, settings )
        : _self.media__grid( 'fixed3', media, settings )
    -}}
{%- endmacro %}



{% macro accordion( items, settings = null ) -%}
{%- if items -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}
    {% set settings = {
        medialayer: 'default'
    } | merge( settings ) %}

    {% embed ['_site/accordion','_core/accordion'] with {
        items     : items,
        settings  : settings,
        medialayer: settings.medialayer,
        firstopen : settings.firstopen ?? false
    } %}
        {% block panel__title "#{item.headline ??? item.alt ??? item.title ??? null}" %}

        {% block panel__content %}
            {%- import "_assemble" as assemble -%}

            {% set textlayer = settings.textlayer ??? 'default' %}

            <div class="flex flex-col gap-8">
                {{ assemble.media( medialayer, item, settings ) }}
                {% if item.summary %}
                    <div class="@container">{{ assemble.text( textlayer, item.summary, settings ) }}</div>
                {% endif %}
            </div>
        {% endblock %}

    {% endembed %}
{%- endif -%}{%- endmacro %}
