{## Render a spacer or divider from `_site/_spacing` if defined
 ------------------------------------------------------------------------------------ ##}
{% macro spacer( spacer, default = "base" ) %}
    {% set spacer = spacer and spacer is same as(true) ? default : spacer %}
    {% if spacer and block( "spacing__#{spacer}", "_site/_spacing" ) is defined %}
        {{ block( "spacing__#{spacer}", "_site/_spacing" ) }}
    {% endif %}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{% macro site__macro( file = '', name = '', content = null, settings = {} ) -%}
    {% set file = file | replace('/[^\\w]+/', '') %}
    {% set name = name | replace('/[^\\w]+/', '') %}
    {% set tmpl = "{% from '_site/#{file}' import #{name} as m %}{{ m is defined ? m(c,s) : '' }}" %}
    {{- include( template_from_string( tmpl ), { c: content, s: settings } ) -}}
{%- endmacro %}



{% macro site__iterator( name = '', elem = '', content = null, settings = {} ) -%}
    {% set elem = elem | replace('/[^\\w]+/', '') %}
    {% set name = name | replace('/[^\\w]+/', '') %}
    {% set tmpl = "{% from '_site/_iterators' import #{name} as m %}{{ m is defined ? m(e,c,s) : '' }}" %}
    {{- include( template_from_string( tmpl ), { e: elem, c: content, s: settings } ) -}}
{%- endmacro %}


{% macro site__element( elem = '', content = null, frame = {}, settings = {} ) -%}
    {% set elem = elem | replace('/[^\\w]+/', '') %}
    {% set tmpl = "{% from '_site/_elements' import #{elem} as m %}{{ m is defined ? m(c,f,s) : '' }}" %}
    {{- include( template_from_string( tmpl ), { c: content, f: frame, s: settings } ) -}}
{%- endmacro %}



{## Two-Zone Micro Layouts
 ------------------------------------------------------------------------------------ ##
    Maintains layout consistency across the site with named macros for frequently used,
    non-grid layouts. i.e. things like:

    - Text Left / Image Right
    - Text Top / Collection Bottom
    - etc.

    Micro Layouts also allow for the use of a "header" and "footer" zone that can be
    populated with additional content as determined (mostly) by the individual blocks.

    Individual macro definitions can be found in: `_site/_microlayouts.twig`
 ------------------------------------------------------------------------------------ ##}
{% macro microlayout( microlayout = null, content = {}, settings = {} ) -%}

    {% set content = {
        zone1 : null,
        zone2 : null,
        header: null,
        footer: null,
    } | merge(content) %}

    {% set attributes = { data: { microlayout: microlayout } } %}
    {% set container  = settings.container ?? 'default' %}
    {% set hasContent = [ content.zone1, content.zone2, content.header, content.footer ] | join | trim %}

    {%- if microlayout and hasContent -%}
        {% set html = _self.site__macro( '_microlayouts', microlayout, content, settings ) %}
        {% set html = container ? _self.container( container, html, settings ) %}

        {% if content.header ??? content.footer ??? null %}
            {% set html = html | attr({ class: "flex flex-col gap-10" }) %}
        {% endif %}

        {{ html | raw }}
    {%- endif -%}
{%- endmacro %}




{## Run a group of things (Collection, Assets, Media, etc) through an iterator
 ------------------------------------------------------------------------------------ ##
    Iterator macros can be found in: `_site/_iterators.twig`
 ------------------------------------------------------------------------------------ ##}
{% macro iterate( iterator = null, element = null, items = {}, settings = {} ) -%}
    {%- if iterator and element and items -%}

        {% set html = _self.site__iterator( iterator,  element, items, settings )
                  ??? _self.site__iterator( 'default', element, items, settings )
                  ??? null %}

        {## TODO: get this working again ##}
        {## if that doesn't work, use the default core iterator ##}
        {# {% if not html %}
            {% import "_core/card" as cards %}
            {% set html = _self.grid( "fixed1", cards.multiple( items, "summary", settings ) ) %}
        {% endif %} #}

        {{ html | default('') | raw }}
    {%- endif -%}
{%- endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Format HTML output for common elements encountered in the CMS
 ------------------------------------------------------------------------------------ ##
    - images
    - videos
    - audio
    - iframes
    - cards
    - files
 ------------------------------------------------------------------------------------ ##}
{% macro element( type = null, content = {}, frame = {}, settings = {}, loop = null ) -%}

    {## The optional `loop` argument expects a Twig `loop` variable and is only
        (sometimes) useful if rendering a list of elements.

     -> https://twig.symfony.com/doc/3.x/tags/for.html#the-loop-variable

        If provided, tuck it into the `settings` object for safekeeping & easy acccess.
    ------------------------------------------------------------------------------------ ##}
    {% set settings = loop ? settings | merge({ loop: loop }) : settings %}

    {%- if type and content -%}
        {% set html = type == 'html' ? content : _self.site__element( type, content, frame, settings ) %}
        {% if html %}{{ html | raw }}{% endif %}
    {%- endif -%}
{%- endmacro %}



{% macro typography( contentIn = "", formatter = "", settings = {} ) %}

    {## sanitize this variable a bit before letting it execute as code ##}
    {% set formatter = formatter | replace('/[^\\w]+/', '') %}

    {## try the typography macro first ##}
    {% set contentOut = formatter and contentIn ? include( template_from_string(
        "{% from '_site/_typography' import #{formatter} as m %}{{ m is defined ? m(c,s) : '' }}"
    ), { c: contentIn, s: settings } ) ??? null %}

    {## if that doesn't work, check if there's an auto typography function ##}
    {% if not contentOut %}
        {% from '_site/_typography' import auto as autoFormat %}
        {% set contentOut = autoFormat is defined
                ? autoFormat( contentIn, settings )
                : contentIn %}
    {% endif %}

    {% if contentOut -%}
        {{ contentOut | raw }}
    {%- endif %}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Twig Block or Matrix Builder
 ------------------------------------------------------------------------------------ ##
    Renders the content of the HTML string, unless it's empty, in-which case, try
    to render the content of the builder field attached to the provided entry.

    Typically this is called in a parent template with the html variable being provided
    as `block('content')` so that a child template can overload {% block content %}
    as needed and still have the builder content available as a fallback.

    Can be particularly useful for sidebars.

    Additional documentation available in: `_core/block.twig`
 ------------------------------------------------------------------------------------ ##}
{% macro block( html = "", builder = "content", entry = null, settings = {} ) %}
    {% from "_core/block" import findBlockOrBuilder as render %}
    {{ render( html, builder, entry, settings ) }}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Menu Stuff
 ------------------------------------------------------------------------------------ ##}
{% macro menu( menu ) %}
    {{ include( "_site/partials/menu.#{menu}" ) }}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Containers & Spacing
 ------------------------------------------------------------------------------------ ##}
{% macro container( container = false, html = null, settings = {} ) %}
    {% import "_site/_containers" as containers %}
    {% set json  = containers.definitions() | json_decode %}
    {% set class = json[container] ?? json['base'] ??? null %}

    {{ html and class
        ? tag( 'div', settings | merge({ class: class, html: html }) )
        : html | raw }}
{% endmacro %}

{% macro openContainer( container = false ) -%}
    {{ _self.container( container, "__TEMP__" ) | replace({
        '__TEMP__': '',
        '</div>': ''
    }) | trim | raw }}
{%- endmacro %}
{% macro closeContainer() %}</div>{% endmacro %}
{## --------------------------------------------------------------------------------- ##}




{## Basic <img> tag
 ------------------------------------------------------------------------------------ ##
    You can pass it as many images as you like, but we're only gonna use the first one.
 ------------------------------------------------------------------------------------ ##}
{% macro img( images = null, settings = null ) %}

    {## test to make sure images wasn't passed as an array,
        or if it was, just grab the first one ##}
    {% set image = null %}
    {% set image = images.url ??? null ? images : null %}
    {% set image = not image and images is iterable ? images.one() ??? images|first ??? null : image %}

    {% set caption = settings.caption ??? null %}

    {## if the image is provided as an object or hash, only url attribute is required
     -------------------------------------------------------------------------------- ##
        url      : 'https://path.to/image',
        id       : 1234,
        width    : 100,
        height   : 100,
        transform: 'namedTransformHandle',
     -------------------------------------------------------------------------------- ##}
    {% if image and image.url ?? null %}
        {% if settings.transform|default() and image.url|default() and image.id|default() %}
            {% do image.setTransform( settings.transform ) %}
        {% endif %}

        {% set img = tag( 'img', {
            src    : image.url,
            width  : image.width    ??? null,
            height : image.height   ??? null,
            class  : settings.class ??? null,
            loading: 'lazy'
        }) %}

        {{ tag( 'figure', {
            class: settings.figureClass ??? settings.figure ??? "relative z-10",
            data:  settings.data ??? null,
            html:  img ~ caption
        }) }}
    {% endif %}


    {## passed a string containing html like  `<img src='https://path.to/image'>` ##}
    {% if not image and images and not images is iterable %}
        {{ tag( 'figure', {
            class: settings.figure ??? null,
            html : images | retconAttr( 'img', { class: settings.class ??? null, loading: 'lazy' }, false )
                   ~ caption
        }) }}
    {% endif %}


    {## placeholder ##}
    {% if ( images is iterable and not image ) or not images %}
        {{ _self.placeholder( settings ) }}
    {% endif %}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Basic <audio> player tag
 ------------------------------------------------------------------------------------ ##}
{% macro audio( asset = null, settings = {} ) %}
    {%- if asset -%}
        <audio
            id="audio--{{ asset.id ?? null }}"
            controls
            {% if settings.autoplay|default() %}autoplay{% endif %}
            class="block w-full max-w-4xl bg-[#f1f3f4] rounded-none"
            ><source src="{{ asset.url ?? null }}" type="{{ asset.mimeType ?? null }}" />
        </audio>
    {%- endif -%}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Basic <video> player tag
 ------------------------------------------------------------------------------------ ##}
{% macro video( asset = null, settings = {} ) %}
    {%- if asset -%}
        {% set class  = "w-full aspect-video" %}
        {% set poster = asset.images.one() ??? asset.images[0] ??? null %}

        {% if poster.url|default() and poster.id|default() %}
            {% do poster.setTransform('widescreen') %}
        {% endif %}

        {% if asset.embed.html ??? null %}
            {{ asset.embed.html
                | retconAttr( 'iframe', { height: false, width : false } )
                | retconAttr( 'iframe', { class : class } ) }}
        {% else %}
            <video
                id="video--{{ asset.id ?? null }}"
                controls
                {% if settings.autoplay|default() %}autoplay{% endif %}
                class="{{class}}"
                poster="{{ poster.url ?? null }}"
                ><source src="{{ asset.url ?? null }}" type="{{ asset.mimeType ?? null }}" />
            </video>
        {% endif %}
    {%- endif -%}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Basic <iframe> embed
 ------------------------------------------------------------------------------------ ##}
{% macro iframe( iframe = "", settings = {} ) %}
    {{ iframe
        | retconAttr( 'iframe', { height: false, width : false } )
        | retconAttr( 'iframe', { class : 'w-full aspect-video' } ) }}
{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Placeholder images (for wireframing & development)
 ------------------------------------------------------------------------------------ ##}
{% macro placeholder( settings = {} ) %}
    {% if getenv('CRAFT_ENVIRONMENT') != 'production' %}

        {% set type   = settings._placeholder|default('default') %}
        {% set width  = type == 'icon' ? 170 : 900 %}
        {% set height = type == 'icon' ? 170 : 500 %}
        {% set source = type == 'icon'
            ? "https://placeskull.com/#{width}/#{height}/475569/#{random(1,24)}"
            : "https://picsum.photos/seed/#{random(1,9999)}/#{width}/#{height}?grayscale&blur=2" %}

        {{ _self.img( tag( 'img', {
            src: source,
            alt: 'Placeholder'
        } ), settings ) }}
    {% endif %}
{% endmacro %}

{#
Outputs an SVG to be used as an image placeholder, optionally including target dimensions.

@var width          int     Desired element width
@var height         int     Desired element height
@var showDimensions bool    Whether to display target dimensions (defaults to `true`)
@var fill           string  Background fill color (defaults to `'#D0D0D0'`)
#}
{# {% set showDimensions = showDimensions ?? true %}
{% set fill = fill ?? '#D0D0D0' %}
<svg class="{{ class ?? '' }}"
     xmlns="http://www.w3.org/2000/svg"
     width="{{ width }}"
     height="{{ height }}"
     viewBox="0 0 {{ width }} {{ height }}"
>
  <g clip-path="url(#clip0)">
    <rect fill="{{ fill }}" width="{{ width }}" height="{{ height }}"/>
    <line x1="0" y1="0" x2="{{ width }}" y2="{{ height }}" stroke="rgba(255,255,255,0.3)"/>
    <line x1="0" y1="{{ height }}" x2="{{ width }}" y2="0" stroke="rgba(255,255,255,0.3)"/>
  </g>
  <text fill="rgba(0,0,0,0.1)"
        font-family="ui-sans-serif,system-ui,-apple-system,sans-serif"
        font-size="16"
        dy="3%"
        font-weight="thin"
        x="50%"
        y="50%"
        text-anchor="middle"
  >
    {%- if showDimensions %}
      {{ width }} × {{ height }}
    {% endif -%}
  </text>
</svg> #}


{## --------------------------------------------------------------------------------- ##}