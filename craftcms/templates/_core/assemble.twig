{% macro images( images, imagelayer, settings ) %}{{ raw(
    include( "_site/image.#{imagelayer}", { images: images, settings: settings }, ignoreMissing = true )
    ??? _self.runmacro( 'image', imagelayer, images, settings )
) }}{% endmacro %}



{% macro collection( items = null, collectionlayer = null, settings = {} ) -%}{{ raw(
    include( "_site/collection.#{collectionlayer}", { items: items, settings: settings }, ignoreMissing = true )
    ??? _self.runmacro( 'collection', collectionlayer, items, settings )
) }}{% endmacro %}



{% macro builder( blocks = null, builder = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'builder', builder, blocks, settings )
)}}{% endmacro %}


{% macro searchpart( params = null, partname = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'search', partname, params, settings )
)}}{% endmacro %}


{% macro accountparts( params = null, partname = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'account', partname, params, settings )
)}}{% endmacro %}


{## Card Rendering Macro
 ------------------------------------------------------------------------------------ ##

    Maintains path and inheritence consistency when generating content cards.

 ------------------------------------------------------------------------------------ ##
    Content specific cards can override and/or inject content into any part of
    the requested card layout. Default path: `_content/<sectionHandle>/card.twig`

    Variations for different entrytypes can generally be dealt with inside the
    section-level card file. If separate entrytype specific card overrides are
    necessary, the card path below can be adjusted to something like:

    {% set cardpath = [
        "_content/#{section}/card.#{entrytype}",
        "_content/#{section}/card",
    ] %}

    Content specific override cards are passed the desired card layout as a variable
    called `extends` which they should use to dynamically extend themselves from.
 ------------------------------------------------------------------------------------ ##}
{% macro card( carditem, cardpath, settings = null, loop = null ) -%}
{%- if carditem and cardpath -%}

    {% set settings = settings is not null and settings is iterable ? settings : {} %}
    {% set settings = settings | merge({ loop: loop }) %}

    {## If the Card Path was provided as a string, test if a file exists at that path.
        If not, consider it a cardlayer name and let CardBase generate a default path ##}
    {% if cardpath is not null and cardpath is not iterable %}
        {% if '/' not in cardpath and 'card.' not in cardpath %}
            {% set settings = settings | merge({ cardlayer: cardpath }) %}
            {% set cardpath = null %}
        {% endif %}
    {% endif %}

    {## Push the cardpath onto the settings so that it will get picked up by CardBase ##}
    {% set settings = settings | merge({ path: cardpath }) %}


    {## Base Card Object
    {## ----------------------------------------------------------------------------- ##}
        {% set card = CardBase( carditem, settings ) %}
    {## ----------------------------------------------------------------------------- ##
        `CardBase` is a very simple Twig function written in PHP and editable here:
        -> `craftcms/modules/sitemodule/src/twigextensions/CardBaseTwig.php`

        It is a necessary evil for it to exist outside of Twig inorder to provide a
        consistent and predictable card object to all card layouts at any point in
        the inheritence & render chain.

        If Twig had a more robust way to return a variable from an inline {% macro %}
        exectution (without rendering it), `CardBase` could easily exist as Twig code.
     -------------------------------------------------------------------------------- ##}


    {## Content Specific Card Factor
    {## ----------------------------------------------------------------------------- ##}
        {%- set html = include([
            "_site/#{card.section}.#{card.type}._card",
            "_site/#{card.section}._card"
        ], {
            card: card,
            settings: settings
        }, withContext = false, ignoreMissing = true ) ??? null -%}
    {## ----------------------------------------------------------------------------- ##

        Card Factory files are named using `section` and `type` handles for the
        content type they represent. They are used to adjust how any card layout will
        render for a specific content type.

            _site/<section>.<entrytype>._card.twig

            _site/articles._card.twig
            _site/topics._card.twig
            _site/articles.blog._card.twig
            _site/articles.news._card.twig


        Not to be confused with an content specific cardlayer, which can be used to
        adjust how a single card layout will render for a specific content type.

            _site/card.summary.blog.twig
            _site/card.thumbnail.profile.twig

     -------------------------------------------------------------------------------- ##}

    {## Render normally if no Card Factory exists for this content type ##}
    {%- set html = html ? html : include( card.path, {
        card: card,
        settings: settings
    }, withContext = false ) -%}

    {{- raw( html ) -}}
{% endif %}{%- endmacro %}



{## Text Layer / Typography Adjustments
 ------------------------------------------------------------------------------------ ##

 ------------------------------------------------------------------------------------ ##}
{% macro text( text = null, textlayer = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'text', textlayer, text, settings )
)}}{% endmacro %}



{## Media Elements
 ------------------------------------------------------------------------------------ ##
    <video>, <audio>, <iframe>
 ------------------------------------------------------------------------------------ ##}
{% macro media( media = null, medialayer = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'media', medialayer, media, settings )
)}}{% endmacro %}


{## Block Spacers / Separators / Dividers
 ------------------------------------------------------------------------------------ ##

 ------------------------------------------------------------------------------------ ##}
{% macro blockspacer( block = null, spacer = null, settings = {} ) %}{{ spacer ? raw(
    _self.runmacro( 'block', "spacer__#{spacer}", block, settings )
) }}{% endmacro %}



{## Block Layout
 ------------------------------------------------------------------------------------ ##
    Theme Open / Close + Content Open / Close
 ------------------------------------------------------------------------------------ ##}
{% macro blockpart( block = null, layoutpart = null, settings = {} ) %}{{ raw(
    _self.runmacro( 'block', layoutpart, block, settings )
) }}{% endmacro %}



{## Menus
 ------------------------------------------------------------------------------------ ##

 ------------------------------------------------------------------------------------ ##}
{% macro menu( entry = null, menu = null, settings = {} ) %}{{ raw(
        include( "_site/menu.#{menu}", { entry: entry, settings: settings }, ignoreMissing = true )
    ??? include( "_core/menu.#{menu}", { entry: entry, settings: settings }, ignoreMissing = true )
    ??? _self.runmacro( 'menu', menu, entry, settings )
) }}{% endmacro %}



{## Two-Zone Micro Layouts
{------------------------------------------------------------------------------------ ##
    Maintains layout consistency across the site with named macros for frequently used,
    non-grid layouts. i.e. things like:

    - Text Left / Image Right
    - Text Top / Collection Bottom
    - etc.

    Micro Layouts also allow for the use of a "header" and "footer" zone that can be
    populated with additional content as determined (mostly) by the individual blocks.

    Individual macro definitions can be found in: `_site/microlayouts.twig`
{------------------------------------------------------------------------------------ ##}
{% macro microlayout( microlayout, content, settings = null ) -%}
{%- if content is iterable -%}
    {%- set content = {
        zone1 : content.zone1  is defined ? content.zone1  | trim : null,
        zone2 : content.zone2  is defined ? content.zone2  | trim : null,
        header: content.header is defined ? content.header | trim : null,
        footer: content.footer is defined ? content.footer | trim : null,
    } -%}
    {%- set settings  = settings is null or settings is not iterable ? {} : settings -%}
    {%- set settings  = settings | merge({ microlayout: microlayout }) -%}
    {{- raw( _self.runnamedmacro( 'microlayouts', microlayout, content, settings ) ) -}}
{%- endif %}{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Containers & Spacing
{------------------------------------------------------------------------------------ ##}
{% macro container( container, html, settings = null ) -%}
{%- if html | trim -%}
    {%- set container = container and container is not iterable ? container : 'default' -%}
    {%- set settings  = settings is null or settings is not iterable ? {} : settings    -%}
    {%- import "_site/layout._containers" as containers -%}
    {%- set json  = containers.definitions() | json_decode -%}
    {%- set class = json[container] ?? json.default ??? null -%}
    {{- class ? tag('div', { class: class, html: html }) : html -}}
{%- endif %}{% endmacro %}

{% macro opencontainer( container ) %}{{
    raw( _self.container( container, "-" )|trim[:-7] )
}}{% endmacro %}
{% macro closecontainer() %}</div>{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{% macro runmacro( element = null, macroname = null, content = null, settings = null ) -%}
    {% set element   = element   | replace('/[^\\w\.]+/', '') %}
    {% set macroname = macroname | replace('/[^\\w]+/', '') %}
    {% set macroname = macroname ??? 'default' %}
    {% set macrohtml = "" %}

    {% set core__named   = "{% from '_core/#{element}' import #{macroname} as m %}{{ m is defined ? m(c,s) : '' }}" %}
    {% set core__default = "{% from '_core/#{element}' import default as m %}{{ m is defined ? m(c,s) : '' }}" %}

    {## if the local `_site/<element>.twig` file exists ##}
    {% if source( "_site/#{element}", ignore_missing = true) %}

        {% set site__named   = "{% from '_site/#{element}' import #{macroname} as m %}{{ m is defined ? m(c,s) : '' }}" %}
        {% set site__default = "{% from '_site/#{element}' import default as m %}{{ m is defined ? m(c,s) : '' }}" %}

        {% set macrohtml = ( macroname == 'default' )
            ?       include( template_from_string( site__default ), { c: content, s: settings } )
                ??? include( template_from_string( core__default ), { c: content, s: settings } )

            :       include( template_from_string( site__named   ), { c: content, s: settings } )
                ??? include( template_from_string( core__named   ), { c: content, s: settings } )
                ??? include( template_from_string( site__default ), { c: content, s: settings } )
                ??? include( template_from_string( core__default ), { c: content, s: settings } ) %}

    {## otherwise, just use the core files ##}
    {% else %}
        {% set macrohtml = ( macroname == 'default' )
            ?       include( template_from_string( core__default ), { c: content, s: settings } )

            :       include( template_from_string( core__named   ), { c: content, s: settings } )
                ??? include( template_from_string( core__default ), { c: content, s: settings } ) %}
    {% endif %}

    {{- macrohtml | trim ? raw(macrohtml) : '' -}}
{%- endmacro %}



{% macro runnamedmacro( element = null, macroname = null, content = null, settings = null ) -%}
    {% set element   = element   | replace('/[^\\w\.]+/', '') %}
    {% set macroname = macroname | replace('/[^\\w]+/', '') %}
    {% set macroname = macroname ??? null %}

    {% set site__named = "{% from '_site/#{element}' import #{macroname} as m %}{{ m is defined ? m(c,s) : '' }}" %}
    {% set core__named = "{% from '_core/#{element}' import #{macroname} as m %}{{ m is defined ? m(c,s) : '' }}" %}

    {% set output = include( template_from_string( site__named ), { c: content, s: settings } )
                ??? include( template_from_string( core__named ), { c: content, s: settings } )
                ??? "" %}

    {{- output | trim ? raw(output) : '' -}}
{%- endmacro %}