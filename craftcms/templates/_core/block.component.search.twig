{## Component Block   Collection Search Variant [Core Template]
{---------------------------------------------------------------------------------------}
    The Collection Search component can be loaded with Sprig for a better frontend
    user experience.

    When we do this, we want to take over the entire `Micro-layout` as opposed to just
    the `zone2` content. This gives Sprig a little more flexibility about where it
    can lay out its parts.
{-------------------------------------------------------------------------------------##}
{% extends _callback is defined and _callback
    ? template_from_string('{% block search__microlayout "" %}')
    : [ "_site/block.component", "_core/block.component" ] %}


{%- set settings = block.settings ??? settings ???  null %}
{%- set settings = settings is not null and settings is iterable ? settings : {} -%}


{% block block__microlayout %}
    {%- set settings = block.settings ?? null -%}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}

    {{ sprig( _self, {
        _callback      : true,
        settings       : settings,
        collectionids  : block.collections.one() ? collect( block.collections.ids() ).toArray : [],
        zone1__content : block('block__zone1'),
        header__content: block('block__header'),
        footer__content: block('block__footer')
    } ) }}
{% endblock %}


{%- block search__microlayout %}
    {%- set settings = settings is not null and settings is iterable ? settings : {} -%}

    {%- set settings = {
        microlayout: 'default',
        interface  : 'keyword',
        pagination : 'nextprev',
        decklayer  : 'grid3',
        limit      : 12,
        results    : false,
    } | merge( settings ) -%}


    {## Collect Search Parameters & Pagination Results
    {---------------------------------------------------------------------------------------}
        CollectionBase is a PHP Twig macro that returns a query object based on the
        search params passed into it. It is editable here:

        -> `craftcms/modules/sitemodule/src/twigextensions/CollectionBaseTwig.php`

        It is a necessary evil for it to exist outside of Twig in order to provide a
        consistent and predictable interface to looking up collections from different
        content sources and conforming their results so that any colllection iterator
        can generate output from them.

        If Twig had a more robust way to return a variable from an inline {% macro %}
        exectution (without rendering it), `CollectionBase` could easily exist as Twig.
    {-------------------------------------------------------------------------------------##}
    {% set search = {
        page  : craft.app.request.getParam('page') ??? craft.app.request.pageNum ??? 1,
        query : craft.app.request.getParam('q') ??? null,
        filter: craft.app.request.getParam('f') ??? null,
        limit : settings.limit ??? 12,
        return: 'query'
    } %}


    {## Handling Variables with Sprig
    {---------------------------------------------------------------------------------------}
        Sprig can't pass objects around, so in order to tell Sprig which Collection(s) we
        want to search through, we have two options:

     1) We can pass a list of Collection IDs:

        collectionsids: [1,2,3]

     2) We can create a Collection on the fly:

        collect: {
            section  : 'articles',
            type     : 'blog',
            relatedTo: entry.id,
        }
    {-------------------------------------------------------------------------------------##}
    {% set collect = collect ??? null %}
    {% set collect = collect is not null and collect is iterable ? collect : null %}

    {% set collectionids = collectionids ??? null %}
    {% set collectionids = collectionids is not null and collectionids is iterable ? collectionids : [] %}

    {% set searchOK = settings.results or search.query or search.filter or search.page > 1 ? true : false %}

    {% set queryobj = searchOK ? CollectionBase( collect ?? collectionids, search ) : null %}
    {% set pageinfo = null %}
    {% set results  = [] %}

    {% if queryobj %}
        {% set pageinfo = sprig.paginate( queryobj, search.page ) %}
        {% set results  = pageinfo.pageResults %}
    {% endif %}


    {## Create Params Object for Search Macros
    {---------------------------------------------------------------------------------------}
        This will become the primary object that gets passed to all search related macros.
        Basically a combination of the original search parameters + pagination info.
    {-------------------------------------------------------------------------------------##}
    {%- set uuid = 'sprig_' ~ md5( settings | json_encode() ) | camel -%}
    {%- set params = search | merge({
        uuid    : uuid,
        last    : pageinfo.last  ??? 0,
        first   : pageinfo.first ??? 0,
        total   : pageinfo.total ??? 0,
        pages   : pageinfo.totalPages ??? 0,
        sprig   : true,
        trigger : pageinfo.pageTrigger ??? 'p',
        baseurl : settings.entryurl ??? siteUrl( craft.app.request.url ),
    }) -%}


    {%- import "_assemble" as assemble -%}
    {{- assemble.microlayout( settings.microlayout, {
        zone1 : block('search__zone1'),
        zone2 : block('search__zone2'),
        header: header__content ??? '',
        footer: footer__content ??? '',
    }, settings ) -}}
{%- endblock -%}



{%- block search__zone1 -%}
    <div class="sticky top-20">
        {{ zone1__content ? raw( zone1__content ) : '' }}
        {% if settings.interface != 'none' %}
            <form method="get" action="{{ params.baseurl }}" class="max-w-5xl w-full pb-10">
                {% import "_assemble" as assemble %}
                {{ assemble.searchpart( params, 'keywordinput', settings ) }}
                {{ assemble.searchpart( params, 'topicfilter', settings ) }}
            </form>
        {% endif %}
    </div>
{% endblock %}


{%- block search__zone2 -%}
    {% import "_assemble" as assemble %}
    <div class="w-full" id="{{ params.uuid }}">
        {% if results %}
            {{ assemble.carddeck( settings.decklayer, results, settings ) }}

            {% if params.pages > 1 %}
                <div class="pt-10">{{ assemble.searchpart( params, 'pagination', settings ) }}</div>
            {% endif %}
        {% endif %}
    </div>
{%- endblock -%}