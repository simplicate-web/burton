{% set _args = settings is defined and settings is iterable ? settings|merge(_context) : _context %}
{% set _this = {
    blockID     : create('craft\\helpers\\StringHelper').UUID(),
    items       : [],
    settings    : [],
    class       : 'mx-auto max-w-4xl space-y-4 w-full',
    openClass   : 'p-4 bg-white',
    itemCard    : '_cards/item/basic',
    itemTagClass: "max-w-lg mx-auto flex flex-col gap-4",
}|merge(_args) %}

{% if _this.items %}
    <div
        x-data="{ splide: null }"
        x-cloak
        x-init="$nextTick(() => {
            splide = new Splide($refs['splide-{{_this.blockID}}'], {
                type: 'loop',
                autoHeight: true,
                perPage: 1
            }).mount()
        })">

        <section
            id="splide-{{_this.blockID}}"
            x-ref="splide-{{_this.blockID}}"
            class="splide relative z-40 pb-8 mb-8"
            aria-label="Carousel"
        >
            <div class="splide__track">
                <ul class="splide__list">
                    {% for item in _this.items %}
                        <li class="splide__slide flex flex-col items-center justify-start">
                            {{ include( _this.itemCard, {
                                entry: item,
                                loop: loop,
                                settings: _this
                            }, withContext = false ) }}
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </section>
    </div>
{% endif %}

{% html %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.0.7/dist/css/splide.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.0.7/dist/js/splide.min.js"></script>

    <style>
        /* kind of hacky and should probably be in a css file */
        #splide-{{_this.blockID}} .splide__pagination {
            display: none;
        }

        #splide-{{_this.blockID}} .splide__arrows {
            padding-top : 2rem;
            position: absolute;
            bottom : -2rem;
            left: 50%;
            transform: translateX(-50%);
        }

        #splide-{{_this.blockID}} .splide__arrow--prev {
            left: -2rem;
        }

        #splide-{{_this.blockID}} .splide__arrow--next {
            left: 2rem;
        }
    </style>
{% endhtml %}
