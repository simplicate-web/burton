{## Site Assembler
{---------------------------------------------------------------------------------------}
    This file is the primary assembler for the site. It is responsible for determining
    which files and/or macro to use based on the provided arguments and the existence
    of the necessary files and macro definitions.

    This allows macros to exist in both `_site` and `_core` and to prefer using the
    version from the file in the `_site` folder over `_core`, but still allowing for
    a graceful fallback if something is missing.
{-------------------------------------------------------------------------------------##}



{## Text Layer / Typography Adjustments
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `textlayer` argument within a file in
    the path below. If no match is found, it will fallback to use the `default()` macro.

    Text Layer macros can be found in:
    `_site/text.twig`
    `_core/text.twig`
{-------------------------------------------------------------------------------------##}
{% macro text( textlayer, text, settings ) -%}
    {{- raw( _self._macro( 'text', textlayer, text, settings ) ) -}}
{%- endmacro -%}



{## Media Layer Adjustments
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `medialayer` argument within a file in
    the path below. If no match is found, it will fallback to use the `default()` macro.

    Media Layer macros can be found in:
    `_site/media.twig`
    `_core/media.twig`
{-------------------------------------------------------------------------------------##}
{% macro media( medialayer, media, settings ) -%}
    {%- set html = include( "_site/media.#{medialayer}", { media: media, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'media', medialayer, media, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}



{## Image Layer Adjustments
{---------------------------------------------------------------------------------------}
    Looks for a file named after the value of `imagelayer` argument in the path below.
    `_site/image.<imagelayer>.twig`

    If not file is found, look for a macro named after the value of `imagelayer` argument
    within a file in the path below. If no match is found, it will fallback to use the
    `default()` macro.

    Image Layer macros can be found in:
    `_site/image.twig`
    `_core/image.twig`
{-------------------------------------------------------------------------------------##}
{% macro images( imagelayer, images, settings ) %}
    {%- set html = include( "_site/image.#{imagelayer}", { images: images, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'image', imagelayer, images, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}



{## Card Decks
{---------------------------------------------------------------------------------------}
    Looks for a file named after the value of `decklayer` argument in the path below.
    `_site/carddeck.<carddeck>.twig`

    If not file is found, look for a macro named after the value of `carddeck` argument
    with the prefix `carddeck__` within a file in the path below. If no match is found,
    it will fallback to use the `carddeck__default()` macro.

    Card Deck macros have the `carddeck__` prefix and can be found in:
    `_site/card.twig`
    `_core/card.twig`
{-------------------------------------------------------------------------------------##}
{% macro carddeck( decklayer, items, settings ) -%}
    {%- set html = include( "_site/carddeck.#{decklayer}", { items: items, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'card:deck', decklayer, items, settings ) -%}
    {{- html ? raw( html ) -}}
{%- endmacro %}



{## Block Builders
{---------------------------------------------------------------------------------------}
    Looks for a file named after the value of `builder` argument in the path below.
    `_site/builder.<builder>.twig`

    If not file is found, look for a macro named after the value of `builder` argument
    with the prefix `cbuilder__` within a file in the path below. If no match is found,
    it will fallback to use the `builder__default()` macro.

    Block Builder macros have the `builder__` prefix and can be found in:
    `_site/block.twig`
    `_core/block.twig`
{-------------------------------------------------------------------------------------##}
{% macro builder( builder, items, settings ) -%}
    {%- set html = include( "_site/builder.#{builder}", { items: items, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'block:builder', builder, items, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}



{## Block Parts
{---------------------------------------------------------------------------------------}
    Handles rendering of the parts of a block that are not the main content.
{-------------------------------------------------------------------------------------##}
{% macro blockpart( part, block, settings ) -%}
    {{- raw( _self._macro( 'block', part, block, settings ) ) -}}
{%- endmacro %}



{## Micro Layouts
{------------------------------------------------------------------------------------ ##
{-------------------------------------------------------------------------------------##}
{% macro microlayout( microlayout, content, settings = null ) -%}
{%- if content is iterable -%}
    {%- set content = {
        zone1 : content.zone1  is defined ? content.zone1  | trim : null,
        zone2 : content.zone2  is defined ? content.zone2  | trim : null,
        header: content.header is defined ? content.header | trim : null,
        footer: content.footer is defined ? content.footer | trim : null,
    } -%}
    {%- set settings = settings is null or settings is not iterable ? {} : settings -%}
    {%- set settings = settings | merge({ microlayout: microlayout }) -%}
    {{- raw( _self._macro( 'layouts:micro', microlayout, content, settings ) ) -}}
{%- endif %}{% endmacro %}
{## --------------------------------------------------------------------------------- ##}

{% macro gridlayout( grid, content, settings = null ) -%}
    {{- content ? raw( _self._macro( 'layouts:grid', grid, content, settings )) -}}
{%- endmacro %}


{## Layout Separators & Dividers
{---------------------------------------------------------------------------------------}
{-------------------------------------------------------------------------------------##}
{% macro spacer( spacer, block = null, settings = null ) -%}
    {{- spacer ? _self._macro( 'layouts:spacer', spacer, block, settings ) -}}
{%- endmacro %}



{## Containers
{-------------------------------------------------------------------------------------##}
{% macro container( container, html, settings = null ) -%}
{%- if html | trim -%}
    {%- set container = container and container is not iterable ? container : 'default' -%}
    {%- set settings  = settings is null or settings is not iterable ? {} : settings    -%}
    {# {%- import "_site/layouts" as containers -%} #}
    {%- import "_site/layouts" as containers -%}
    {%- set json  = containers.containers() | json_decode -%}
    {%- set class = json[container] ?? json.default ?? 'default' -%}
    {{- class ? tag('div', { class: class, html: html }) : html -}}
{%- endif %}{% endmacro %}

{% macro opencontainer( container ) %}{{
    raw( _self.container( container, "-" )|trim[:-7] )
}}{% endmacro %}
{% macro closecontainer() %}</div>{% endmacro %}
{## --------------------------------------------------------------------------------- ##}



{## Search Parts
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `partname` argument within a file in
    the path below. If no match is found, it will render *nothing*.

    Search Part macros can be found in:
    `_site/search.twig`
    `_core/search.twig`
{-------------------------------------------------------------------------------------##}
{% macro searchpart( params = null, partname = null, settings = {} ) -%}
    {{- raw( _self._macro( 'search', partname, params, settings ) ) -}}
{%- endmacro %}



{## Account Parts
{---------------------------------------------------------------------------------------}
    Looks for a macro named after the value of `partname` argument within a file in
    the path below. If no match is found, it will render *nothing*.

    Account Part macros can be found in:
    `_site/account.twig`
    `_core/account.twig`
{-------------------------------------------------------------------------------------##}
{% macro accountparts( params = null, partname = null, settings = {} ) -%}
    {{- raw( _self._macro( 'account', partname, params, settings ) ) -}}
{%- endmacro %}



{## Card Rendering Macro
{---------------------------------------------------------------------------------------}
    Rendering cards is a bit more complex than other elements because of the need to
    maintain a consistent, but flexible interface across content types.

    To achieve this, we've used a couple of different strategies:

    - Input Field Name Standardization
    - Template Naming & Inheritence Chains
    - CaseBase() Custom Twig Function
    - Content Specific Card Factories
{-------------------------------------------------------------------------------------##}
{% macro card( cardlayer, carditem, settings = null ) -%}
{%- if carditem and cardlayer -%}

    {## CardBase()
    {-----------------------------------------------------------------------------------}
        CardBase() is a relatively simple Twig macro used to define a consistent data
        structure for card objects. As part of the SiteModule, this macro is autoloaded
        and can be called from any Twig template.

        You may view/edit the macro and read more about why it's written in PHP here:

    -> `craftcms/modules/sitemodule/src/twigextensions/CardBaseTwig.php`
    {---------------------------------------------------------------------------------##}
    {% set card = CardBase( carditem, settings ) %}


    {## Content Specific Card Factories
    {-----------------------------------------------------------------------------------}
        Card Factory can monitor and adjust how a specific content type will render
        regardless of the card being used.

        Card Factory template files end in `._card.twig` and are named using the
        `section` and (optionally) `type` handles of the content they represent.

            `_site/<section>.<entrytype>._card.twig`
            `_site/<section>._card.twig`
            ------------------------------------
            `_site/articles.news._card.twig`
            `_site/articles._card.twig`

    {-----------------------------------------------------------------------------------}
        These should not be confused with a card that has a variant for a specific
        type of content, which will only adjust how that single card layout will render.

            _site/card.summary._blog.twig
            _site/card.spotlight._profile.twig
    {---------------------------------------------------------------------------------##}
    {%- set factorypath = [
        "_site/#{card.section}.#{card.type}._card",
        "_site/#{card.section}._card"
    ] -%}

    {%- set cardpath = [
        "_site/card.#{cardlayer}.#{card.section}.#{card.type}",
        "_site/card.#{cardlayer}.#{card.section}",
        "_site/card.#{cardlayer}",
        "_site/card",
        "_core/card"
    ] -%}

    {## Check if cardlayer is actually a card path ##}
    {%- set ispath   = ( cardlayer ends with '.twig' or '/' in cardlayer ) -%}
    {%- set cardpath = ( ispath ) ? [cardlayer] : cardpath -%}

    {{- include( factorypath | merge(cardpath), {
        card: card,
        path: cardpath,
        settings: settings
    }, withContext = false ) -}}

{%- endif %}{%- endmacro %}







{## Menus
{---------------------------------------------------------------------------------------}

{-------------------------------------------------------------------------------------##}
{% macro menu( entry = null, menu = null, settings = {} ) %}
    {%- set html = include( "_site/menu.#{menu}", { entry: entry, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : include( "_core/menu.#{menu}", { entry: entry, settings: settings }, ignoreMissing = true ) -%}
    {%- set html = html ? html : _self._macro( 'menu', menu, entry, settings ) -%}
    {{- html ? raw( html ) -}}
{% endmacro %}



{## Macro Chain
{------------------------------------------------------------------------------------ ##
    This macro is the brain of the assembly file. It is responsible for determining
    which macro to run (in which file) based on the provided arguments.

    First it checks `_site/<template>`, then `_core/<template>` for a macro matching
    the provided `macroname`. If no match is found, it check for a fallback
    `default()` macro (first in `_site`, then in `_core`).

    A `default()` or `<part>__default()` macro should always exist in the `_core`
    file for any element being assembled.

    For clarity, below is an unminified, unoptimized, pseudocode version of what this
    macro is doing -- just with better error handling.
{------------------------------------------------------------------------------------ ##
    {%- from '_site/element' import macroname as site__element__macroname,
                                    default   as site__element__default -%}

    {%- from '_core/element' import macroname as core__element__macroname,
                                    default   as core__element__default -%}

    {{- site__element__macroname(content,settings) ??
        core__element__default(  content,settings) ??
        site__element__macroname(content,settings) ??
        core__element__default(  content,settings) -}}
{-------------------------------------------------------------------------------------##}
{% macro _macro( template = null, macroname = null, content = null, settings = null ) -%}

    {% set template = template ?? null %}
    {% set template = template is not null and template is not iterable
        ? template | replace('/[^\\w\.\:]+/', '') : null %}

    {% set macroname = macroname ?? null %}
    {% set macroname = macroname is not null and macroname is not iterable
        ? macroname | replace('/[^\\w]+/', '') : null %}
    {% set macroname = macroname ?? 'default' %}

  {% if template %}
    {# if template is a compound name, split it into parts #}
    {% set name  = macroname %}
    {% set dflt  = 'default' %}
    {% set parts = template | split(':') %}
    {% if parts | length > 1 %}
        {% set template = parts[0] %}
        {% set name = [ parts[1], name ] | join('__') %}
        {% set dflt  = [ parts[1], dflt  ] | join('__') %}
    {% endif %}

    {# localization #}
    {%- set temp_slug  = template | replace('/[^\\w]+/', '') %}
    {%- set site_name  = "__site__#{temp_slug}__#{name}" | snake -%}
    {%- set site_dflt  = "__site__#{temp_slug}__#{dflt}" | snake -%}
    {%- set core_name  = "__core__#{temp_slug}__#{name}" | snake -%}
    {%- set core_dflt  = "__core__#{temp_slug}__#{dflt}" | snake -%}

    {%- set source_file   = template ends with '.twig' ? template : template ~ '.twig' -%}
    {%- set site__element = source( "_site/#{source_file}", ignore_missing = true ) -%}

    {# default macro in `_site/<template>` or `_core/<template>` #}
    {% set template_string = site__element
        ? "{% from '_site/#{template}' import #{dflt} as #{site_dflt}  %}{% from '_core/#{template}' import #{dflt} as #{core_dflt} %}{{- #{site_dflt} is defined ? #{site_dflt}(c,s) : #{core_dflt}(c,s) -}}"
        : "{% from '_core/#{template}' import #{dflt} as #{core_name} %}{{ #{core_name}(c,s) }}" %}

    {# named macro in `_site/<template>` or `_core/<template>`, fallback to `default`  #}
    {% if name != dflt %}
        {% set template_string = site__element
            ? "{% from '_site/#{template}' import #{name} as #{site_name}, #{dflt} as #{site_dflt} %}{% from '_core/#{template}' import #{name} as #{core_name}, #{dflt} as #{core_dflt} %}{{ #{site_name} is defined ? #{site_name}(c,s) : #{core_name} is defined ? #{core_name}(c,s) : #{site_dflt} is defined ? #{site_dflt}(c,s) : #{core_dflt}(c,s) }}"
            : "{% from '_core/#{template}' import #{name} as #{core_name}, #{dflt} as #{core_dflt} %}{{ #{core_name} is defined ? #{core_name}(c,s) : #{core_dflt}(c,s) }}"
        %}
    {% endif %}

    {# run our macro #}
    {{ include( template_from_string( template_string ), { c: content, s: settings }, withContext = false ) }}
  {%- endif -%}
{%- endmacro %}