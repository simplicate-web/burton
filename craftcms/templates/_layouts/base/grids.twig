{## Grid Layout Generator
 ------------------------------------------------------------------------------------ ##

    Mobile ready named layouts for slapping a grid-based wrapper div (or whatever)
    around one (or many) elements. Used extensively within Collection & Media blocks.

    - http://localhost:8000/sitebook/layouts/grids
    - http://localhost:8000/sitebook/blocks/collection
    - http://localhost:8000/sitebook/blocks/media

 ------------------------------------------------------------------------------------ ##

 !! This macro outputs as JSON so that it can be read by the macro template or any
    other place it might be useful (like Sitebook reference pages).

 ------------------------------------------------------------------------------------ ##}
{% macro definitions() %}{{ {

    _:'## defaults are used for any attributes left off an option definition',
    defaults: {
        base: 'grid',
        gap: 'gap-8 @3xl:gap-16 @5xl:gap-24'
    },

    _:'## named grid definitions',
    options: {

        fixed1: {
        _:'## just a single column, but with row-gap',
            cols: 'grid-cols-1',
            carousel: {}
        },

        fixed2: {
        _:'## always 2 columns wide',
            cols: 'grid-cols-2',
            carousel: {}
        },

        stacked2: {
        _:'## 2 columns collapsing to one on mobile',
            cols: 'grid-cols-1 @3xl:grid-cols-2',
            carousel: {}
        },

        fixed3: {
        _:'## always 3 columns wide',
            cols: 'grid-cols-3',
            carousel: {}
        },

        stacked3: {
        _:'## 3 columns collapsing on mobile',
            cols: 'grid-cols-1 @3xl:grid-cols-2 @5xl:grid-cols-3',
            carousel: {}
        },

        adaptive3: {
        _:'## NOT WORKING YET',
            cols: 'grid-cols-1 @3xl:grid-cols-2 @5xl:grid-cols-3',
            carousel: {}
        },

        stack2grow4: {
        _:'## 4 columns wide, collapsing to 2x2',
            cols: 'grid-cols-1 @md:grid-cols-2 @5xl:grid-cols-4',
            carousel: {}
        },

        stacked6: {
        _:'## 6 columns collapsing',
            cols: 'grid-cols-1 @3xl:grid-cols-2 @5xl:grid-cols-6',
            gap: 'gap-8 @3xl:gap-12',
            carousel: {}
        }
    }
} | json_encode() | raw }}{% endmacro %}



{## Wrap a Grid layout around a string of html
 ------------------------------------------------------------------------------------ ##

 {% import "_layouts/base/grids" as grids %}

 {{ grids.generate( htmlToWrap, 'gridName' ) }}

 ------------------------------------------------------------------------------------ ##}
{% macro generate( html, grid, modifier = null, extraClasses = null ) %}

    {% set json = _self.definitions() | json_decode %}
    {% set defs = json['defaults'] %}
    {% set opts = json['options'] %}

    {% set grid = ( opts[grid] ??? null ) ? grid : opts | keys | first %}
    {% set attr = opts[grid] ??? opts|first %}

    {{ tag( 'div', {
        html : html,
        data : { grid: grid },
        class: [
            attr["base__#{modifier}"] ??? defs["base__#{modifier}"] ??? attr.base ??? defs.base ??? null,
            attr["cols__#{modifier}"] ??? defs["cols__#{modifier}"] ??? attr.cols ??? defs.cols ??? null,
            attr["gap__#{modifier}"]  ??? defs["ga[__#{modifier}"]  ??? attr.gap  ??? defs.gap  ??? null,
            extraClasses
        ]
    }) }}
{% endmacro %}


{## Return the grid configuration to be used for carousels
 ------------------------------------------------------------------------------------ ##

 {% import "_layouts/base/grids" as grids %}

 {{ grids.generate( htmlToWrap, 'gridName' ) }}

 ------------------------------------------------------------------------------------ ##}
{% macro carouselConfig( grid ) %}

    {% set json = _self.definitions() | json_decode %}
    {% set defs = json['defaults'] %}
    {% set opts = json['options'] %}

    {% set grid = ( opts[grid] ??? null ) ? grid : opts | keys | first %}
    {% set attr = opts[grid] ??? opts|first %}

    {{ tag( 'div', {
        html : html,
        data : { grid: grid },
        class: [
            attr["base__#{modifier}"] ??? defs["base__#{modifier}"] ??? attr.base ??? defs.base ??? null,
            attr["cols__#{modifier}"] ??? defs["cols__#{modifier}"] ??? attr.cols ??? defs.cols ??? null,
            attr["gap__#{modifier}"]  ??? defs["ga[__#{modifier}"]  ??? attr.gap  ??? defs.gap  ??? null,
            extraClasses
        ]
    }) }}
{% endmacro %}