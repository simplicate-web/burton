{% set props = {
    blockID      : null,
    blockConfig  : null,
    builder      : 'content',
    cardLayout   : '_components/cards/text',
    config       : null,
    content1     : '',
    content3     : '',
    contentType  : null,
    entryID      : null,
    entryUrl     : '/',
    gridLayout   : '_layouts/grids/1-column',
    itemComponent: null,
    order        : 'mostRecent',
    perPage      : '12',
    topics       : []
} %}

{# sprig variables #}
{% set page  = page  ??? craft.app.request.pageNum ??? 1 %}
{% set topic = topic ??? craft.app.request.getParam('topic') ??? '' %}
{% set query = query ??? craft.app.request.getParam('query') ??? '' %}

{# merge with values passed in via `params` hash #}
{% set props = ( params is defined and params is iterable ) ? props|merge(params) : props %}

{# if the input params contained a blockID, we need to load the block before anything else #}
{% if props.blockID %}
    
    {# normalizeBlocks() is a twig function from Gearbox (see: `cms/modules/gearbox/src/twigextensions`)
       it collects block content + merges layout settings from any associated reference fields #}
    {% set thisBlock = normalizeBlocks( [props.blockID], props.entryID, props.builder )|first %}

    {% if thisBlock %}
        {% set content     = thisBlock.content    ??? null %}
        {% set settings    = thisBlock.settings   ??? null %}
        {% set blockConfig = settings.block       ??? null %}
        {% set itemsConfig = settings.itemsConfig ??? null %}

        {% set blockParams = {
            blockConfig  : blockConfig,
            itemsConfig  : itemsConfig,
            cardLayout   : itemsConfig.useCard   ??? '_components/cards/text',
            contentType  : content.contentType   ??? null,
            entryUrl     : thisBlock.entry.url   ??? '/',
            gridLayout   : blockConfig.layout    ??? '_layouts/grids/1-column',
            itemComponent: itemsConfig.component ??? null,
            order        : content.order.value   ??? 'mostRecent',
            perPage      : content.perPage       ??? '12',
            topics       : content.topics.all()  ??? [],
        } %}

        {# merge these values back into the template props #}
        {% set props = props|merge(blockParams) %}
    {% endif %}
{% endif %}

{# don't bother doing anything unless we have a valid contentType #}
{% set contentType = props.contentType.value ??? props.contentType ??? "" %}
{% if contentType %}

    {# search/sort/filter settings #}
    {% set orderBy = query ? 'score DESC' : 'postDate DESC' %}
    {% set orderBy = ( props.order == 'random'       ) ? 'RAND()'     : orderBy %}
    {% set orderBy = ( props.order == 'alphabetical' ) ? 'title DESC' : orderBy %}

    {# being to create the starting query #}
    {% set entryQuery = craft.entries()
        .with(['topics', 'images'])
        .orderBy(orderBy)
        .limit(props.perPage) %}

        {% if '__' in contentType %}
            {% set typeParts = contentType|split('__') %}
            {% set entryQuery = entryQuery
                .section(typeParts[0])
                .type(typeParts[1])
            %}
        {% else %}
            {% set entryQuery = entryQuery.section(contentType) %}
        {% endif %}

    {# are we searching by a keyword #}
    {% if query %}
        {% set entryQuery = entryQuery.search(query) %}
    {% endif %}

    {# are we filtering by topic(s) #}
    {% if topic ??? props.topics %}
        {% set topic = topic ??? props.topics[0].slug ??? '' %}
        {% if topic %}
            {% set topicEntry = props.topics|filter( v => v.slug == topic ) %}
            {% set entryQuery = entryQuery.relatedTo(topicEntry) %}
        {% else %}
            {% set entryQuery = entryQuery.relatedTo(props.topics) %}
        {% endif %}
    {% endif %}

    {# do the search & pagination #}
    {% set pageInfo   = sprig.paginate(entryQuery, page) %}
    {% set entryItems = pageInfo.pageResults %}

    {# make sure the url stays updated #}
    {% set pushUrl  = ( page > 1 ) ? "#{props.entryUrl}/p#{page}" : props.entryUrl %}
    {% set queryStr = { query: query, topic: topic }|url_encode %}
    {% do sprig.pushUrl( queryStr ? "#{pushUrl}?#{queryStr}" : pushUrl ) %}
 
    {# prepare entries content #}
    {% set entriesContent2 -%}
        {{ include( '_builders/blocks/_partials/entriesOutput', {
            items: entryItems,
            pageInfo: pageInfo,
            query: query,
            topic: topic,
            params: {
                blockID  : props.blockID,
                builder  : props.builder,
                card     : props.cardLayout,
                config   : props.blockConfig,
                component: props.itemComponent,
                topics   : props.topics
            }
        }, withContext = false ) }}
    {%- endset %}

    {% set searchContent1 %}
        {{ include( '_components/_sprig/entries/_searchFilter', {
            params: props,
            pageInfo: pageInfo,
            query: query,
            topic: topic
        }, withContext = false ) }}
    {% endset %}

    {% set blockFooter %}
        {{ include( '_components/_sprig/entries/_pagination', {
            params: props,
            pageInfo: pageInfo,
            query: query,
            topic: topic            
        }, withContext = false ) }}
    {% endset %}

    <div s-results="cGrid__wrapper__{{props.blockID}}">
        {# grid layouts are micro-templates for various content/layout patterns.
            templates includes all html/tailwind necessary for a basic layout render.
            layout settings can be modified or overridden via the `config` param.
            grid layout twig files are typically stored in `cms/templates/_layouts/grids/` #}
        {% embed props.gridLayout ignore missing with {
            blockID: props.blockID,
            config: props.blockConfig,
            content1: props.content1,
            content3: props.content3,
            content1Hide: false,
            content2Hide: ( not entryItems ),
            content3Hide: ( not props.content3|trim )
        } %}
            {% block beforeGrid %}
                
            {% endblock %}

            {% block content1 %}
                {{content1|raw}}

                {{searchContent1|raw}}
            {% endblock %}

            {% block content2 %}
                {{entriesContent2|raw}}
            {% endblock %}

            {% block content3 %}
                {{props.content3|raw}}
            {% endblock %}

            {% block footer %}
                {{blockFooter|raw}}
            {% endblock %}
        {% endembed %}
    </div>
{% endif %}
