# ------------------------------------------------------------------------------------- #
# DOCKER CONTAINERS              https://docs.docker.com/reference/compose-file/services/
# ------------------------------------------------------------------------------------- #
services:

# Status Message (on Successful Launch)
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/busybox
# ➜ etc/docker/banner.sh
  status:
    image: busybox:latest
    command: "sh -c 'sleep 1 && /bin/sh /home/banner.sh'"
    env_file: &project_env
      - ./craftcms/.env
    volumes:
      - ./etc/docker/banner.sh:/home/banner.sh
    depends_on:
      nginx:
        condition: service_started
      frontend:
        condition: service_healthy

# PHP FastCGI
# ----------------------------------------------------------------------- #
# ➜ https://github.com/simplicateca/docker-php-fpm
# ➜ etc/docker/php.ini
  php: &php_container
    image: simplicateca/php-fpm:8.2
    command: php-fpm
    restart: on-failure
    env_file: *project_env
    user: "1000:1000"
    working_dir: /app
    volumes:
      - ./craftcms:/app:cached
      - ./etc/docker/php.ini:/usr/local/etc/php/conf.d/php.ini
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

# Composer (PHP Dependency Management)
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/composer
  composer:
    image: composer:2
    command: "composer install --verbose --no-progress --no-interaction"
    user: "1000:1000"
    volumes:
      - ./craftcms:/app

# Craft CMS (with Queue Runner)
# ----------------------------------------------------------------------- #
# ➜ craftcms/composer.json
# ➜ craftcms/.env
  craftcms:
    <<: *php_container
    command: >
      bash -c "
        ./craft install/check --interactive=0 &&
        ./craft setup/keys --interactive=0 &&
        ./craft up --interactive=0 &&
        ./craft clear-caches/all --interactive=0 &&
        ./craft queue/listen --verbose"
    stop_grace_period: "1s"
    tty: true
    depends_on: [php]


# MySQL 8 Database
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/mysql
# ➜ etc/docker/seed
  mysql:
    image: mysql/mysql-server:8.0
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    restart: on-failure
    env_file: *project_env
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_DATABASE=${CRAFT_DB_DATABASE:-project}
      - MYSQL_USER=${CRAFT_DB_USER:-project}
      - MYSQL_PASSWORD=${CRAFT_DB_PASSWORD:-project}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./etc/docker/seed:/docker-entrypoint-initdb.d
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=$$MYSQL_ROOT_PASSWORD --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 60s
      retries: 20

# Node + ViteJS Frontend
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/node
# ➜ ./frontend/package.json
  frontend:
    image: node:lts
    command: >
      bash -c "
        [ ! -f package-lock.json ] && npm install;
        [ ! -d node_modules/.vite ] && npm ci;
        npm run dev"
    restart: on-failure
    stop_grace_period: "1s"
    tty: true
    ports:
      - 3000:3000
    user: "1000:1000"
    working_dir: /var/www/frontend
    volumes:
      - ./frontend:/var/www/frontend:cached
      - ./craftcms/templates:/var/www/craftcms/templates:ro
      - ./craftcms/modules:/var/www/craftcms/modules:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/js/app.js"]
      interval: 10s
      timeout: 120s
      retries: 20

# Nginx Webserver
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/nginx
# ➜ etc/docker/nginx.conf
  nginx:
    image: nginx:1-alpine
    restart: on-failure
    depends_on: [php]
    ports:
      - 8000:80
    volumes:
      - ./craftcms:/app
      - ./frontend/public/local:/app/web/dist/local:ro
      - ./etc/docker/nginx.conf:/etc/nginx/conf.d/craft.conf:ro
      - ./etc/feedme:/app/web/feedme/:ro

# Redis (Key-Value Storage)
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/redis
  redis:
    image: redis:7-alpine
    restart: on-failure
    ports:
      - 6379:6379

# Mailhog (SMTP Testing Server)
# ----------------------------------------------------------------------- #
# ➜ https://github.com/mailhog/MailHog
  mailhog:
    image: mailhog/mailhog:latest
    restart: on-failure
    ports:
      - 8025:8025

# Adminer (Database Web UI)
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/_/adminer
# ➜ Requires `debug` profile
  adminer:
    image: adminer:latest
    ports:
      - 8080:8080
    profiles: [debug]
    depends_on: [mysql]

# Minio (s3-Compatible Object Storage)
# ----------------------------------------------------------------------- #
# ➜ https://hub.docker.com/r/minio/minio
  minio:
    image: minio/minio
    entrypoint: sh
    command: >
      -c "
        mkdir -p /data/${S3_bucket:-project} &&
        /usr/bin/minio server /data --console-address \":9001\""
    env_file: *project_env
    user: "1000:1000"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY:-project}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY:-secretkey}
    ports:
      - "9000:9000" # S3
      - "9001:9001" # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

# Meilisearch - data storage & search
# ----------------------------------------------------------------------- #
# ➜ https://www.meilisearch.com/
  meilisearch:
    image: getmeili/meilisearch
    env_file: *project_env
    user: "1000:1000"
    environment:
      - http_proxy
      - https_proxy
      - MEILI_MASTER_KEY=secret
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=development
    ports:
      - 7700:7700
    volumes:
      - meili_data:/data.ms

# n8n - workflow automation
# ----------------------------------------------------------------------- #
# ➜ https://docs.n8n.io/hosting/installation/server-setups/docker-compose/
  n8n:
    image: n8nio/n8n
    env_file: *project_env
    user: "1000:1000"
    ports:
      - 5678:5678
    volumes:
      - n8n_data:/home/node/.n8n # App Data
      - ./etc/n8n:/home/node/share # File Share

# ------------------------------------------------------------------------------------- #
# CONTAINER DATA STORAGE          https://docs.docker.com/reference/compose-file/volumes/
# ------------------------------------------------------------------------------------- #
volumes:
  n8n_data:
  meili_data:
  minio_data:
  mysql_data:
